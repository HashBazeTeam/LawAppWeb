{"version":3,"file":"static/js/225.79ff9d17.chunk.js","mappings":"yOAWMA,EAAeC,EAAAA,MAAW,kBAAM,8BAAN,IAC1BC,EAAmBD,EAAAA,MAAW,kBAAM,6BAAN,IAoFpC,UA/EsB,YACJE,EAAAA,EAAAA,OACCC,EAAAA,EAAAA,MADjB,IAGA,GAA8BC,EAAAA,EAAAA,WAAS,GAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0CF,EAAAA,EAAAA,UAAS,IAAnD,eAAsBG,GAAtB,WACA,GAAwCH,EAAAA,EAAAA,UAAS,IAAjD,eAAOI,EAAP,KAAqBC,EAArB,KACA,GAA8BL,EAAAA,EAAAA,UAAS,CAAC,GAAxC,eAAOM,EAAP,KACA,GADA,MACwCN,EAAAA,EAAAA,UAAS,CAAC,IAAlD,eAAOO,EAAP,KACMC,GADN,KACqB,UAKrBC,EAAAA,EAAAA,YAAU,WACR,IAAIC,GAAe,EAmBnB,OAlBAR,GAAW,GAEXS,EAAAA,GAAAA,eAEGC,MAAK,SAACC,GACDH,IACFR,GAAW,GACXC,EAAiBU,GACjBR,EAAgBQ,GAEnB,IACAC,OAAM,SAACC,GACNb,GAAW,GACXc,QAAQC,IAAIF,EAAMG,SAClBC,EAAAA,GAAAA,MAAY,0CACb,IACHjB,GAAW,GAEJ,kBAAOQ,GAAe,CAAtB,CACR,GAAE,IAGH,IACA,GAAoCV,EAAAA,EAAAA,UAAS,GAA7C,eAAOoB,EAAP,KAAmBC,EAAnB,KAUA,OACE,8BACGpB,GACC,iBAAKqB,UAAU,kCAAf,eAAmDC,EAAAA,EAAAA,IAAiB,MAApE,QAEE,gBAAKD,UAAU,OAAf,UACF,SAAC3B,EAAD,CACE6B,SAAUpB,EACVqB,SAnBS,EAoBTL,WAAYA,EACZC,cAAeA,EACfK,iBAnBiB,CACvB,YACA,UACA,QACA,eACA,IAeMpB,QAASA,EACTC,aAAcA,EACdoB,mBAAoB,WAAQ,EAC5BC,mBAAoB,WAAQ,EAC5BC,kBAAmB,WAAQ,EAC3BrB,aAAcA,EAXhB,UAaE,SAACX,EAAD,CACE2B,SAAUpB,EACV0B,YAAatB,SAOxB,C","sources":["views/accounts/agent/AccountListPage.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport store, { accessToken } from \"src/store\";\nimport { toast } from \"react-toastify\";\nimport { deleteEmptyKeys } from \"src/utils/function\";\nimport { useDispatch } from \"react-redux\";\n\nimport { userServices } from \"src/services\";\n\n// Components\nimport { LoadingIndicator } from \"src/components\";\nconst AccountTable = React.lazy(() => import(\"../AccountTable\"));\nconst AccountTableBody = React.lazy(() => import(\"../UserAccountTableBody\"));\n\n/**\n * Agent List page\n */\nconst AgentListPage = () => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const [loading, setLoading] = useState(false);\n  const [agentAccounts, setAgentAccounts] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const [filters, setFilters] = useState({});\n  const [filterErrors, setFilterErrors] = useState({});\n  const accountsType = \"agent\";\n\n  /*\n   * Fetch Agent accounts\n   */\n  useEffect(() => {\n    let isSubscribed = true;\n    setLoading(true);\n\n    userServices\n      .getAllAgents()\n      .then((response) => {\n        if (isSubscribed) {\n          setLoading(false);\n          setAgentAccounts(response);\n          setFilteredData(response);\n        }\n      })\n      .catch((error) => {\n        setLoading(false);\n        console.log(error.message);\n        toast.error(\"Something went wrong. Please try again.\");\n      });\n    setLoading(false);\n    // Cancel any pending request\n    return () => (isSubscribed = false);\n  }, []);\n\n  // Handle pagination\n  const maxPages = 1;\n  const [pageNumber, setPageNumber] = useState(1);\n\n  const tableHeaderCells = [\n    \"Full Name\",\n    \"Country\",\n    \"Email\",\n    \"Phone Number\",\n    \"\",\n  ];\n\n  return (\n    <>\n      {loading ? (\n        <div className=\"flex justify-center bg-slate-50\"> {LoadingIndicator(\"lg\")} </div>\n      ) : (\n          <div className=\"mt-8\">\n        <AccountTable\n          accounts={filteredData}\n          maxPages={maxPages}\n          pageNumber={pageNumber}\n          setPageNumber={setPageNumber}\n          tableHeaderCells={tableHeaderCells}\n          filters={filters}\n          filterErrors={filterErrors}\n          handleFilterChange={() => {}}\n          handleFilterSubmit={() => {}}\n          handleClearFilter={() => {}}\n          accountsType={accountsType}\n        >\n          <AccountTableBody\n            accounts={filteredData}\n            accountType={accountsType}\n          />\n            </AccountTable>\n            </div>\n      )}\n    </>\n  );\n};\n\nexport default AgentListPage;\n"],"names":["AccountTable","React","AccountTableBody","useHistory","useDispatch","useState","loading","setLoading","setAgentAccounts","filteredData","setFilteredData","filters","filterErrors","accountsType","useEffect","isSubscribed","userServices","then","response","catch","error","console","log","message","toast","pageNumber","setPageNumber","className","LoadingIndicator","accounts","maxPages","tableHeaderCells","handleFilterChange","handleFilterSubmit","handleClearFilter","accountType"],"sourceRoot":""}