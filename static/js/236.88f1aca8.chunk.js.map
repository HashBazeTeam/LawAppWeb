{"version":3,"file":"static/js/236.88f1aca8.chunk.js","mappings":"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","sources":["utils/function.js","views/chat/QuestionPool.js","../node_modules/file-saver/src/FileSaver.js"],"sourcesContent":["import { saveAs } from \"file-saver\";\nimport { Timestamp , convertFirestoreTimeStampToDate} from \"src/services/firebase\";\n\n// Get image from bucket given the image identifier\nexport function getImageFromBucket(imageName) {\n  //   return `https://s3.ap-south-1.amazonaws.com/up-to-now-images/${imageName}.${imageType}`;\n  return imageName;\n}\n\n/**\n * Add given data object to FormData type object\n * @param {*} formData : FormData\n * @param {*} data : {key: value}\n * @returns FormData object\n */\nexport function addDataToFormData(data, formData = new FormData()) {\n  for (let key in data) {\n    if (key === \"images\" || key === \"image\") {\n      for (let i = 0; i < data[key].length; i++) {\n        formData.append(key, data[key][i]);\n      }\n      continue;\n    }\n    formData.set(key, data[key]);\n  }\n  return formData;\n}\n\n/**\n * Print FormData object to console\n * @param {*} formData\n * @param {*} data\n */\nexport function printFormData(formData, data) {\n  for (let key in data) {\n    console.log(key, formData.get(key));\n  }\n}\n\n/**\n * Save given image to the local\n * @param {*} urlArr : URL String Array\n */\nexport async function saveImg(urlArr, fileName) {\n  (async () => {\n    if (!Array.isArray(urlArr)) {\n      const xhr = new XMLHttpRequest();\n      xhr.responseType = 'blob';\n      xhr.onload = (event) => {\n        const blob = xhr.response;\n        saveAs(blob, fileName);\n      };\n      xhr.open('GET', urlArr);\n      xhr.send();\n      // const response = await fetch(urlArr);\n      // const blob = await response.blob();\n      // saveAs(blob);\n      return;\n    }\n    for (let i = 0; i < urlArr.length; i++) {\n      const response = await fetch(urlArr[i]);\n      const blob = await response.blob();\n      saveAs(blob);\n    }\n  })();\n}\n\n/**\n * Delete all the empty keys from the given object\n * @param {*} obj : {key: value}\n * @returns\n */\nexport function deleteEmptyKeys(obj) {\n  for (let key in obj) {\n    if (obj[key] === \"\") {\n      delete obj[key];\n    } else if (obj[key] === \"Open this select menu\") {\n      delete obj[key];\n    }\n  }\n  return obj;\n}\n\n/**\n * Convert given Date object to Sri Lanka date format string (dd/mm/yyyy)\n * @param {*} date\n * @returns\n */\nexport function convertTZ(paramDate) {\n  if (!paramDate) return \"\";\n\n  let date = paramDate;\n  if (paramDate instanceof Timestamp) {\n    date = convertFirestoreTimeStampToDate(paramDate);\n  }\n\n  let dateObj = new Date(date);\n\n  // MM-DD-YYYY format\n  let dateStr = dateObj.toLocaleDateString(\"ko-KR\", {\n    timeZone: \"Asia/Colombo\",\n  });\n  // Convert ot YYYY-MM-DD format\n  let dateArr = dateStr.split(\".\");\n  let year = dateArr[0].trim();\n  let month = dateArr[1].trim();\n  let day = dateArr[2].trim();\n\n  year.length === 2 ? (year = \"00\" + year) : year;\n  year.length === 3 ? (year = \"0\" + year) : year;\n  month.length === 1 ? (month = \"0\" + month) : month;\n  day.length === 1 ? (day = \"0\" + day) : day;\n\n  const final = `${year}-${month}-${day}`;\n  return final;\n}\n\n/**\n * Add empty strings to the given object keys if it is not present, null or undefined\n * @param {{key: value}} obj\n * @param {[key1, key2, key3]} keys\n * @returns {{key: value}} obj\n */\nexport function addEmptyStrings(obj, keys = null) {\n  if (keys) {\n    for (let i = 0; i < keys.length; i++) {\n      if (!obj[keys[i]]) {\n        obj[keys[i]] = \"\";\n      } else if (obj[keys[i]] === null) {\n        obj[keys[i]] = \"\";\n      } else if (obj[keys[i]] === undefined) {\n        obj[keys[i]] = \"\";\n      } else if (obj[keys[i]] === \"Open this select menu\") {\n        obj[keys[i]] = \"\";\n      }\n    }\n  } else {\n    for (let key in obj) {\n      if (obj[key] === null) {\n        obj[key] = \"\";\n      } else if (obj[key] === undefined) {\n        obj[key] = \"\";\n      } else if (obj[key] === \"Open this select menu\") {\n        obj[key] = \"\";\n      }\n    }\n  }\n  return obj;\n}\n\nexport function getUpdatedDataOnly(original, updated) {\n  let updatedData = {};\n  for (let key in original) {\n    if (original[key] != updated[key]) {\n      updatedData[key] = updated[key];\n    }\n  }\n  return updatedData;\n}\n","import React, { useEffect, useState } from \"react\";\nimport { LockClosedIcon } from \"@heroicons/react/solid\";\nimport { toast } from \"react-toastify\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { LoadingIndicator } from \"src/components\";\nimport { deleteEmptyKeys } from \"src/utils/function\";\nimport { questionServices } from \"src/services\";\n\nconst Table = React.lazy(() => import(\"./components/Table\"));\nconst TableBody = React.lazy(() => import(\"./components/TableBody\"));\n\n/**\n * Chat Pool section to display all the questions with title and date.\n * TODO: Add a cloud function to update stat of question counts\n */\nexport default function QuestionPool(props) {\n  const { t } = useTranslation();\n  const client = props.location.state?.client; // Get the question from the previous page\n\n  const recordsPerPage = 20; // Records per page\n  const [questionList, setQuestionList] = useState([]);\n  const [maxPages, setMaxPages] = useState(0);\n  const [pageNumber, setPageNumber] = useState(1);\n  const [lastVisibleDoc, setLastVisibleDoc] = useState(null); //  Last visible document in firestore\n  const [loading, setLoading] = useState(false);\n  const [filteredData, setFilteredData] = useState([]);\n  const [filters, setFilters] = useState(filterInitialState);\n  const [filterErrors, setFilterErrors] = useState({});\n\n  /*\n   * Fetch questions\n   */\n  useEffect(() => {\n    let isSubscribed = true;\n    setLoading(true);\n    fetchData().catch((err) => {\n      console.log(err);\n      setLoading(false);\n    });\n    setLoading(false);\n    // Cancel any pending request\n    return () => (isSubscribed = false);\n  }, []);\n\n  /*\n   * Fetch questions when client is changed\n   */\n  useEffect(() => {\n    let isSubscribed = true;\n    setLoading(true);\n    fetchData().catch((err) => {\n      console.log(err);\n      setLoading(false);\n    });\n    setLoading(false);\n    // Cancel any pending request\n    return () => (isSubscribed = false);\n  }, [client]);\n\n  // Fetch data on page change\n  // move :- next or previous\n  // Firestore doesn't provide a way to get the previous page, so we have to use the lastVisibleDoc\n  const fetchData = async (move) => {\n    setLoading(true);\n    try {\n      let _questions;\n      let _totalCount;\n      let _lastVisible;\n\n      if (client && client.clientID != null) {\n        // Get questions by clientID\n        const { questions, totalCount, lastVisible } =\n          await questionServices.getClientQuestion(\n            client.clientID,\n            recordsPerPage,\n            lastVisibleDoc,\n            move\n          );\n        _questions = questions;\n        _totalCount = totalCount;\n        _lastVisible = lastVisible;\n      } else {\n        const { questions, totalCount, lastVisible } =\n          await questionServices.getAllQuestions(\n            filters.status,\n            recordsPerPage,\n            lastVisibleDoc,\n            move\n          );\n        _questions = questions;\n        _totalCount = totalCount;\n        _lastVisible = lastVisible;\n      }\n\n      setQuestionList(_questions);\n      setFilteredData(_questions);\n      setLastVisibleDoc(_lastVisible);\n      setMaxPages(Math.ceil(_totalCount / recordsPerPage));\n      setLoading(false);\n    } catch (error) {\n      console.log(error);\n      toast.error(t(\"common_error\"));\n    }\n    setLoading(false);\n  };\n\n  /**\n   * Handle Filter Change\n   */\n  const handleFilterChange = (e) => {\n    const { name, value } = e.target;\n    setFilters({ ...filters, [name]: value });\n  };\n\n  const handleFilterSubmit = (e) => {\n    e.preventDefault();\n    const filterItems = deleteEmptyKeys(filters);\n    const filteredAccounts = questionList.filter((account) => {\n      for (let key in filterItems) {\n        if (filterItems[key] != account[key]) return false;\n      }\n      return true;\n    });\n    setFilteredData(filteredAccounts);\n  };\n\n  const handleClearFilter = () => {\n    setFilters(filterInitialState);\n    setFilteredData(questionList);\n  };\n\n  const tableHeaderCells = [\n    t(\"topic\"),\n    t(\"date\"),\n    t(\"country\"),\n    t(\"status\"),\n    \"\",\n  ];\n\n  /**\n   * Pagination related methods.\n   */\n  const handlePageChangePrevious = () => {\n    pageNumber == 1 ? 1 : setPageNumber(pageNumber - 1);\n    fetchData(\"previous\");\n  };\n  const handlePageChangeNext = () => {\n    pageNumber == maxPages ? maxPages : setPageNumber(pageNumber + 1);\n    fetchData(\"next\");\n  };\n\n  return (\n    <>\n      {loading ? (\n        <div className=\"flex justify-center\"> {LoadingIndicator(\"lg\")} </div>\n      ) : (\n        <Table\n          accounts={filteredData}\n          maxPages={maxPages}\n          pageNumber={pageNumber}\n          setPageNumber={setPageNumber}\n          tableHeaderCells={tableHeaderCells}\n          filters={filters}\n          filterErrors={filterErrors}\n          handleFilterChange={handleFilterChange}\n          handleFilterSubmit={handleFilterSubmit}\n          handleClearFilter={handleClearFilter}\n          handlePageChangePrevious={handlePageChangePrevious}\n          handlePageChangeNext={handlePageChangeNext}\n          showFilter={client?.clientID != null ? false : true}\n        >\n          <TableBody questions={filteredData} />\n        </Table>\n      )}\n    </>\n  );\n}\n\nconst filterInitialState = {\n  status: \"\",\n};\n","/*\n* FileSaver.js\n* A saveAs() FileSaver implementation.\n*\n* By Eli Grey, http://eligrey.com\n*\n* License : https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md (MIT)\n* source  : http://purl.eligrey.com/github/FileSaver.js\n*/\n\n// The one and only way of getting global scope in all environments\n// https://stackoverflow.com/q/3277182/1008999\nvar _global = typeof window === 'object' && window.window === window\n  ? window : typeof self === 'object' && self.self === self\n  ? self : typeof global === 'object' && global.global === global\n  ? global\n  : this\n\nfunction bom (blob, opts) {\n  if (typeof opts === 'undefined') opts = { autoBom: false }\n  else if (typeof opts !== 'object') {\n    console.warn('Deprecated: Expected third argument to be a object')\n    opts = { autoBom: !opts }\n  }\n\n  // prepend BOM for UTF-8 XML and text/* types (including HTML)\n  // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF\n  if (opts.autoBom && /^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(blob.type)) {\n    return new Blob([String.fromCharCode(0xFEFF), blob], { type: blob.type })\n  }\n  return blob\n}\n\nfunction download (url, name, opts) {\n  var xhr = new XMLHttpRequest()\n  xhr.open('GET', url)\n  xhr.responseType = 'blob'\n  xhr.onload = function () {\n    saveAs(xhr.response, name, opts)\n  }\n  xhr.onerror = function () {\n    console.error('could not download file')\n  }\n  xhr.send()\n}\n\nfunction corsEnabled (url) {\n  var xhr = new XMLHttpRequest()\n  // use sync to avoid popup blocker\n  xhr.open('HEAD', url, false)\n  try {\n    xhr.send()\n  } catch (e) {}\n  return xhr.status >= 200 && xhr.status <= 299\n}\n\n// `a.click()` doesn't work for all browsers (#465)\nfunction click (node) {\n  try {\n    node.dispatchEvent(new MouseEvent('click'))\n  } catch (e) {\n    var evt = document.createEvent('MouseEvents')\n    evt.initMouseEvent('click', true, true, window, 0, 0, 0, 80,\n                          20, false, false, false, false, 0, null)\n    node.dispatchEvent(evt)\n  }\n}\n\n// Detect WebView inside a native macOS app by ruling out all browsers\n// We just need to check for 'Safari' because all other browsers (besides Firefox) include that too\n// https://www.whatismybrowser.com/guides/the-latest-user-agent/macos\nvar isMacOSWebView = _global.navigator && /Macintosh/.test(navigator.userAgent) && /AppleWebKit/.test(navigator.userAgent) && !/Safari/.test(navigator.userAgent)\n\nvar saveAs = _global.saveAs || (\n  // probably in some web worker\n  (typeof window !== 'object' || window !== _global)\n    ? function saveAs () { /* noop */ }\n\n  // Use download attribute first if possible (#193 Lumia mobile) unless this is a macOS WebView\n  : ('download' in HTMLAnchorElement.prototype && !isMacOSWebView)\n  ? function saveAs (blob, name, opts) {\n    var URL = _global.URL || _global.webkitURL\n    var a = document.createElement('a')\n    name = name || blob.name || 'download'\n\n    a.download = name\n    a.rel = 'noopener' // tabnabbing\n\n    // TODO: detect chrome extensions & packaged apps\n    // a.target = '_blank'\n\n    if (typeof blob === 'string') {\n      // Support regular links\n      a.href = blob\n      if (a.origin !== location.origin) {\n        corsEnabled(a.href)\n          ? download(blob, name, opts)\n          : click(a, a.target = '_blank')\n      } else {\n        click(a)\n      }\n    } else {\n      // Support blobs\n      a.href = URL.createObjectURL(blob)\n      setTimeout(function () { URL.revokeObjectURL(a.href) }, 4E4) // 40s\n      setTimeout(function () { click(a) }, 0)\n    }\n  }\n\n  // Use msSaveOrOpenBlob as a second approach\n  : 'msSaveOrOpenBlob' in navigator\n  ? function saveAs (blob, name, opts) {\n    name = name || blob.name || 'download'\n\n    if (typeof blob === 'string') {\n      if (corsEnabled(blob)) {\n        download(blob, name, opts)\n      } else {\n        var a = document.createElement('a')\n        a.href = blob\n        a.target = '_blank'\n        setTimeout(function () { click(a) })\n      }\n    } else {\n      navigator.msSaveOrOpenBlob(bom(blob, opts), name)\n    }\n  }\n\n  // Fallback to using FileReader and a popup\n  : function saveAs (blob, name, opts, popup) {\n    // Open a popup immediately do go around popup blocker\n    // Mostly only available on user interaction and the fileReader is async so...\n    popup = popup || open('', '_blank')\n    if (popup) {\n      popup.document.title =\n      popup.document.body.innerText = 'downloading...'\n    }\n\n    if (typeof blob === 'string') return download(blob, name, opts)\n\n    var force = blob.type === 'application/octet-stream'\n    var isSafari = /constructor/i.test(_global.HTMLElement) || _global.safari\n    var isChromeIOS = /CriOS\\/[\\d]+/.test(navigator.userAgent)\n\n    if ((isChromeIOS || (force && isSafari) || isMacOSWebView) && typeof FileReader !== 'undefined') {\n      // Safari doesn't allow downloading of blob URLs\n      var reader = new FileReader()\n      reader.onloadend = function () {\n        var url = reader.result\n        url = isChromeIOS ? url : url.replace(/^data:[^;]*;/, 'data:attachment/file;')\n        if (popup) popup.location.href = url\n        else location = url\n        popup = null // reverse-tabnabbing #460\n      }\n      reader.readAsDataURL(blob)\n    } else {\n      var URL = _global.URL || _global.webkitURL\n      var url = URL.createObjectURL(blob)\n      if (popup) popup.location = url\n      else location.href = url\n      popup = null // reverse-tabnabbing #460\n      setTimeout(function () { URL.revokeObjectURL(url) }, 4E4) // 40s\n    }\n  }\n)\n\n_global.saveAs = saveAs.saveAs = saveAs\n\nif (typeof module !== 'undefined') {\n  module.exports = saveAs;\n}\n"],"names":["saveImg","urlArr","fileName","Array","isArray","xhr","XMLHttpRequest","responseType","onload","event","blob","response","saveAs","open","send","i","length","fetch","deleteEmptyKeys","obj","key","convertTZ","paramDate","date","Timestamp","convertFirestoreTimeStampToDate","dateArr","Date","toLocaleDateString","timeZone","split","year","trim","month","day","Table","React","TableBody","QuestionPool","props","t","useTranslation","client","location","state","useState","questionList","setQuestionList","maxPages","setMaxPages","pageNumber","setPageNumber","lastVisibleDoc","setLastVisibleDoc","loading","setLoading","filteredData","setFilteredData","filterInitialState","filters","setFilters","filterErrors","useEffect","fetchData","catch","err","console","log","move","clientID","questionServices","questions","totalCount","lastVisible","_questions","_totalCount","_lastVisible","status","Math","ceil","toast","tableHeaderCells","className","LoadingIndicator","accounts","handleFilterChange","e","target","name","value","handleFilterSubmit","preventDefault","filterItems","filteredAccounts","filter","account","handleClearFilter","handlePageChangePrevious","handlePageChangeNext","showFilter","b","a","autoBom","warn","test","type","Blob","c","d","g","onerror","error","dispatchEvent","MouseEvent","document","createEvent","initMouseEvent","window","f","self","global","navigator","userAgent","HTMLAnchorElement","prototype","h","URL","webkitURL","j","createElement","download","rel","href","origin","createObjectURL","setTimeout","revokeObjectURL","msSaveOrOpenBlob","title","body","innerText","HTMLElement","safari","FileReader","k","onloadend","result","replace","readAsDataURL","l","m","module","exports"],"sourceRoot":""}