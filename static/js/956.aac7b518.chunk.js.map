{"version":3,"file":"static/js/956.aac7b518.chunk.js","mappings":"oQAsBO,SAASA,EAAT,GAcH,IAbFC,EAaC,EAbDA,MACAC,EAYC,EAZDA,KACAC,EAWC,EAXDA,YACAC,EAUC,EAVDA,MACAC,EASC,EATDA,SACAC,EAQC,EARDA,MAQC,IAPDC,SAAAA,OAOC,aANDC,OAAAA,OAMC,MANQ,GAMR,MALDC,KAAAA,OAKC,MALM,OAKN,MAJDC,SAAAA,OAIC,aAHDC,SAAAA,OAGC,aAFDC,UAAAA,OAEC,aADDC,eAAAA,OACC,MADgB,GAChB,EACD,OACE,+BACE,UAAC,KAAD,CAAMC,UAAU,OAAOC,GAAI,GAAIC,GAAIR,EAAnC,WACE,SAAC,KAAD,CACES,QAASf,EACTY,UAAWF,EAAY,YAAc,GAFvC,mBAGKX,GAHL,OAGaS,EAAW,IAAM,OAC9B,SAAC,KAAD,CACEQ,SAAUX,EACVE,KAAMA,EACNK,UAAS,oBAAeD,GACxBN,SAAUA,EACVY,GAAIjB,EACJA,KAAMA,EACNG,SAAUA,EAEVD,MAAOA,EAEPgB,UAASd,EACTH,YAAaA,EACbQ,SAAUA,KAEZ,SAAC,KAAD,CAAeS,SAAO,EAAtB,SAAwBd,QAI/B,CAGM,SAASe,EAAT,GAaH,IAAD,EAZDpB,EAYC,EAZDA,MACAC,EAWC,EAXDA,KAEAE,GASC,EAVDD,YAUC,EATDC,OACAC,EAQC,EARDA,SACAC,EAOC,EAPDA,MAOC,IANDC,SAAAA,OAMC,aALDC,OAAAA,OAKC,MALQ,GAKR,MAJDE,SAAAA,OAIC,cAHDC,SAGC,EAFDC,WAAAA,OAEC,WADDC,eAEA,OACE,+BACE,UAAC,KAAD,CAAMC,UAAU,OAAOC,GAAI,GAAIC,GAAIR,EAAnC,WACE,SAAC,KAAD,CACES,QAASf,EACTY,UAAWF,EAAY,YAAc,GAFvC,mBAGKX,GAHL,OAGaS,EAAW,IAAM,OAC9B,SAAC,KAAD,CACER,KAAMA,EACNE,MAAOA,EACPC,SAAUA,EACViB,eAAe,KACff,SAAUA,EACVgB,OAAK,GACHC,MAAO,OACPC,YAAa,MACbC,QAAS,OACTC,aAAc,MACdC,OAAQ,GACRC,YAAa,MACbC,YAAa,UAPV,uBAQUxB,EAAQ,MAAQ,YAR1B,2BASc,QATd,MAYP,SAAC,KAAD,CAAec,UAASd,EAAxB,SAA+CA,QAItD,CA8LM,SAASyB,EAAT,GAaH,IAZF9B,EAYC,EAZDA,MACAC,EAWC,EAXDA,KAEAG,GASC,EAVDF,YAUC,EATDE,UACAC,EAQC,EARDA,MAQC,IAPDE,OAAAA,OAOC,MAPQ,GAOR,MANDE,SAAAA,OAMC,aALDE,UAAAA,OAKC,aAJDC,eAAAA,OAIC,MAJgB,GAIhB,EAHDmB,EAGC,EAHDA,QACA5B,EAEC,EAFDA,MACA6B,EACC,EADDA,aAEA,OACE,+BACE,UAAC,KAAD,CAAMnB,UAAU,OAAOC,GAAI,GAAIC,GAAIR,EAAnC,WACE,SAAC,KAAD,CACES,QAASf,EACTY,UAAWF,EAAY,YAAc,GAFvC,mBAGKX,GAHL,OAGaS,EAAW,IAAM,OAC9B,UAAC,KAAD,CACEI,UAAS,oBAAeD,GACxBX,KAAMA,EACN+B,aAAcA,EACd5B,SAAUA,EACV,aAAW,yBACXe,UAASd,EACTF,MAAOA,EAPT,WASE,sDACC4B,EAAQE,KAAI,SAACC,EAAQC,GAAT,OACX,mBAAoBhC,MAAO+B,EAAO/B,MAAlC,SACG+B,EAAOlC,OADGmC,EADF,QAMf,SAAC,KAAD,CAAehB,SAAO,EAAtB,SAAwBd,QAI/B,C,mSC3FD,UA/NoB,YACD+B,EAAAA,EAAAA,OACDC,EAAAA,EAAAA,MADhB,IAEQC,GAAMC,EAAAA,EAAAA,KAAND,EACFE,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,GAAAA,KAAAA,gBAE7B,GAA8BC,EAAAA,EAAAA,WAAS,GAAvC,eAAgBC,GAAhB,WACA,GAAgCD,EAAAA,EAAAA,UAASH,GAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KACA,GAA4CH,EAAAA,EAAAA,UAASH,GAArD,eAAOO,EAAP,KAAuBC,EAAvB,KACA,GAAoCL,EAAAA,EAAAA,UAAS,CAAC,GAA9C,eAAOM,EAAP,KAAmBC,EAAnB,KACA,GAAoCP,EAAAA,EAAAA,WAAS,GAA7C,eAAOQ,EAAP,KAAmBC,EAAnB,KACA,GAAwCT,EAAAA,EAAAA,WAAS,GAAjD,eAGA,GAHA,WAG8CA,EAAAA,EAAAA,WAAS,IAAvD,yBACAU,QAAQC,IAAId,IAEZe,EAAAA,EAAAA,YAAU,WACRT,EAAYN,GACZQ,EAAkBR,EACnB,GAAE,CAACA,IAGJ,IAAMgB,EAASC,IAAAA,OAAW,CACxBC,SAAUD,IAAAA,SAAaE,WAAW3D,MAAM,aACxC4D,QAASH,IAAAA,SAAaE,WAAW3D,MAAM,WACvC6D,IAAKJ,IAAAA,OAAWE,WAAWG,MAAM,IAAI9D,MAAM,iBAAiB+D,IAAI,OAChEC,MAAOP,IAAAA,SACJO,MAAM,CAAEC,KAAM,CAAEH,OAAO,KACvBH,WACAG,MAAM,IACN9D,MAAM,SACTkE,YAAaT,IAAAA,SAAaE,WAAW3D,MAAM,kBAMvCmE,EAAe,SAACC,GACpB,MAA+BA,EAAEC,OAAzBpE,EAAR,EAAQA,KAAME,EAAd,EAAcA,MAAd,EAAqBmE,aAEdrB,EAAWhD,GAClB6C,GAAY,kBAAKD,GAAN,cAAiB5C,EAAOE,IACpC,EAQKoE,EAAY,yCAAG,WAAOH,GAAP,6FACdjB,EADc,oDAIbqB,EAAcC,IAAAA,KAAO5B,EAAU,CACnC,WACA,UACA,QACA,cACA,QAEFD,GAAW,GAXQ,EAYMY,EAAOkB,SAASF,EAAa,CACpDG,YAAY,IADNtE,EAZW,EAYXA,MAZW,EAYJF,MAGXyE,GAAa,EACjBvB,QAAQC,IAA4B,IAAxBT,EAASqB,aAEK,IAAxBrB,EAASqB,cACRW,EAAAA,EAAAA,IAAsBhC,EAASqB,eAEhCtB,GAAW,GACXM,GAAc,kBAAKD,GAAN,IAAkBiB,YAAa,0BAC5CU,GAAa,GAEVvE,GAAUuE,EAzBI,2CA2BTE,EAAAA,GAAAA,YAAyBtC,EAASuC,OAAQP,GA3BjC,QA4BfxB,EAAkBwB,GAClB1B,EAAY0B,GACZQ,EAAAA,GAAAA,QAAc1C,EAAE,mBA9BD,kDAgCfe,QAAQC,IAAR,MACA0B,EAAAA,GAAAA,MAAA,UAAe1C,EAAE,kBAjCF,yBAmCfM,GAAW,GAnCI,6CAsCXqC,EAAS,CAAC,EAtCC,UAuCA5E,EAAM6E,SAvCN,IAuCjB,2BAASC,EAAuB,QAC9BF,EAAOE,EAAKC,KAAK,IAAMD,EAAKE,OAxCb,+BA0CjBnC,GAAc,kBAAKD,GAAegC,IAClCrC,GAAW,GA3CM,gEAAH,sDAgDZ0C,EAAuB,yCAAG,uHAAH,qDAI7B,OACE,+BACE,iBAAKzE,UAAU,sDAAf,WACE,gBAAKA,UAAU,mBAAf,UACE,SAAC,KAAD,CAEEb,MAAM,qBACNkB,GAAG,yBACHd,SAAU,WACRgD,GAAeD,GACfL,EAAYC,EACb,OAGL,iBAAKlC,UAAU,UAAf,WACGd,EAAAA,EAAAA,IAAsB,CACrBC,MAAOsC,EAAE,aACTrC,KAAM,WACNE,MAAO0C,EAASa,SAChBtD,SAAU+D,EACV9D,MAAO4C,EAAWS,SAClB/C,WAAW,EACXF,UAAU,EACVH,UAAW6C,KAGZpD,EAAAA,EAAAA,IAAsB,CACrBC,MAAOsC,EAAE,iBACTrC,KAAM,QACNE,MAAO0C,EAASmB,MAChB5D,SAAU+D,EACV9D,MAAO4C,EAAWe,MAClBrD,WAAW,EACXF,UAAU,EACVH,UAAW6C,KAEZpD,EAAAA,EAAAA,IAAsB,CACrBC,MAAOsC,EAAE,iBACTrC,KAAM,MACNE,OAAOoF,EAAAA,EAAAA,GAAU1C,EAASgB,KAC1BzD,SAAU+D,EACV9D,MAAO4C,EAAWY,IAClBlD,WAAW,EACXF,UAAU,EACVH,UAAW6C,EACX5C,OAAQ,EACRC,KAAM,SAEP2C,GACC,SAAC,KAAD,CACEnD,MAAOsC,EAAE,gBACTrC,KAAK,cACLE,MAAO0C,EAASqB,YAChB9D,SA/Gc,SAACD,UAClB8C,EAAU,YACjBH,GAAY,kBAAKD,GAAN,IAAgBqB,YAAa/D,IACzC,EA6GWE,MAAO4C,EAAWiB,YAClBvD,WAAW,EACXJ,OAAQ,KAGV,SAAC,KAAD,CACEP,MAAOsC,EAAE,gBACTrC,KAAK,cACLE,MAAO0C,EAASqB,YAChBvD,WAAW,EACXF,UAAU,EACVH,UAAW6C,EACX5C,OAAQ,IAIX4C,GACGrB,EAAAA,EAAAA,IAAuB,CACrB9B,MAAOsC,EAAE,WACTrC,KAAM,UACNE,MAAO0C,EAASe,QAChBxD,SAAU+D,EACV9D,MAAO4C,EAAWW,QAClBjD,WAAW,EACXF,UAAU,EACVH,UAAW6C,EACXpB,QAASyD,EAAAA,EACTjF,OAAQ,KAEVR,EAAAA,EAAAA,IAAsB,CACpBC,MAAOsC,EAAE,WACTrC,KAAM,UACNE,MAAO0C,EAASe,QAChBxD,SAAU+D,EACV9D,MAAO4C,EAAWW,QAClBjD,WAAW,EACXF,UAAU,EACVH,UAAW6C,EACX5C,OAAQ,QAGhB,gBAAKM,UAAU,mBAAmB4E,QAAStC,EAA3C,UACE,iBAAKtC,UAAU,cAAf,WACE,SAAC,KAAD,CACE6E,MAAM,UACNC,QAAQ,UACR9E,UAAU,OACV+E,QAASrB,EAJX,SAMGjC,EAAE,aAEL,SAAC,KAAD,CACEoD,MAAM,UACNC,QAAQ,UACR9E,UAAU,OACV+E,QAASN,EAJX,SAMGhD,EAAE,kCAOhB,C","sources":["components/common/CustomCInputGroup.js","views/profile/ProfilePage.js"],"sourcesContent":["import React from \"react\";\nimport {\n  CFormFeedback,\n  CFormInput,\n  CFormTextarea,\n  CFormSelect,\n  CInputGroup,\n  CButton,\n  CFormLabel,\n  CTableHeaderCell,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableRow,\n  CCol,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport { cilPlus } from \"@coreui/icons\";\nimport PhoneInputWithCountry from \"react-phone-number-input\";\n\n// Custom form input group component\nexport function CustomCFormInputGroup({\n  label,\n  name,\n  placeholder,\n  value,\n  onChange,\n  error,\n  readOnly = false,\n  mdSize = 12,\n  type = \"text\",\n  required = true,\n  multiple = true,\n  uppercase = false,\n  inputClassName = \"\",\n}) {\n  return (\n    <>\n      <CCol className=\"mb-3\" xs={12} md={mdSize}>\n        <CFormLabel\n          htmlFor={name}\n          className={uppercase ? \"uppercase\" : \"\"}\n        >{`${label}${required ? \"*\" : \"\"}`}</CFormLabel>\n        <CFormInput\n          disabled={readOnly}\n          type={type}\n          className={`!bg-white ${inputClassName}`}\n          readOnly={readOnly}\n          id={name}\n          name={name}\n          onChange={onChange}\n          // defaultValue={value}\n          value={value}\n          // required={required}\n          invalid={error ? true : false}\n          placeholder={placeholder}\n          multiple={multiple}\n        />\n        <CFormFeedback invalid>{error}</CFormFeedback>\n      </CCol>\n    </>\n  );\n}\n\n// Custom phone number input group component\nexport function CustomCFormPhoneNumberInputGroup({\n  label,\n  name,\n  placeholder,\n  value,\n  onChange,\n  error,\n  readOnly = false,\n  mdSize = 12,\n  required = true,\n  multiple = true,\n  uppercase = false,\n  inputClassName = \"\",\n}) {\n  return (\n    <>\n      <CCol className=\"mb-3\" xs={12} md={mdSize}>\n        <CFormLabel\n          htmlFor={name}\n          className={uppercase ? \"uppercase\" : \"\"}\n        >{`${label}${required ? \"*\" : \"\"}`}</CFormLabel>\n        <PhoneInputWithCountry\n          name={name}\n          value={value}\n          onChange={onChange}\n          defaultCountry=\"LK\"\n          readOnly={readOnly}\n          style={{\n            width: \"100%\",\n            borderColor: \"red\",\n            padding: \"15px\",\n            marginBottom: \"4px\",\n            height: 40,\n            borderWidth: \"1px\",\n            borderStyle: \"solid\",\n            borderColor: error ? \"red\" : \"#ced4da\",\n            backgroundColor: \"#fff\",\n          }}\n        />\n        <CFormFeedback invalid={error ? true : false}>{error}</CFormFeedback>\n      </CCol>\n    </>\n  );\n}\n\n// Custom form input with add button group component\nexport function CustomCFormAddInputGroup({\n  label,\n  name,\n  placeholder,\n  value,\n  onChange,\n  error,\n  readOnly = false,\n  mdSize = 12,\n  type = \"text\",\n  required = true,\n  multiple = true,\n  uppercase = false,\n  inputClassName = \"\",\n  onAddInputBtnPressed,\n  addListName,\n  list,\n  addBtnLabel = \"Add\",\n  tableHeaders = [\"Name\"],\n  tableRows = [\"name\"],\n  handleChildRemoveBtnPressed,\n}) {\n  return (\n    <>\n      <CFormLabel\n        htmlFor={name}\n        className={uppercase ? \"uppercase\" : \"\"}\n      >{`${label}${required ? \"*\" : \"\"}`}</CFormLabel>\n      {!readOnly && (\n        <CCol className=\"mb-3\" xs={12} md={mdSize}>\n          <CInputGroup>\n            <CFormInput\n              type={type}\n              className={`!bg-white ${inputClassName}`}\n              readOnly={readOnly}\n              id={name}\n              name={name}\n              onChange={onChange}\n              value={value}\n              // required={required}\n              invalid={error ? true : false}\n              placeholder={placeholder}\n              multiple={multiple}\n              aria-describedby=\"button-addon2\"\n            />\n            <CButton\n              name={addListName}\n              type=\"button\"\n              color=\"secondary\"\n              variant=\"outline\"\n              id=\"button-addon2\"\n              onClick={(e) => onAddInputBtnPressed({ e, tempFieldName: name })}\n            >\n              {/* <CIcon icon={cilPlus} size=\"sm\" className=\"mx-1\"/> */}\n              {addBtnLabel}\n            </CButton>\n          </CInputGroup>\n          <CFormFeedback invalid>{error}</CFormFeedback>\n        </CCol>\n      )}\n\n      {list.length > 0 && (\n        <CTable>\n          <CTableHead>\n            <CTableRow>\n              {tableHeaders.map((header, index) => (\n                <CTableHeaderCell scope=\"col\" key={index}>\n                  {\"\"}\n                  {header}\n                </CTableHeaderCell>\n              ))}\n              <CTableHeaderCell scope=\"col\"></CTableHeaderCell>\n            </CTableRow>\n          </CTableHead>\n          <CTableBody>\n            {list.map((child, index) => (\n              <CTableRow key={index}>\n                {tableRows.map((row, index) => (\n                  <CTableDataCell scope=\"col\" key={index}>\n                    {\"\"}\n                    {child[row]}\n                  </CTableDataCell>\n                ))}\n                <CTableDataCell>\n                  {!readOnly && (\n                    <CButton\n                      color=\"danger\"\n                      variant=\"ghost\"\n                      name=\"childrenRemoveBtn\"\n                      onClick={(_) =>\n                        handleChildRemoveBtnPressed({\n                          child,\n                          listName: addListName,\n                        })\n                      }\n                    >\n                      Remove\n                    </CButton>\n                  )}\n                </CTableDataCell>\n              </CTableRow>\n            ))}\n          </CTableBody>\n        </CTable>\n      )}\n    </>\n  );\n}\n\nexport function CustomCFormTextAreaGroup({\n  label,\n  name,\n  placeholder,\n  value,\n  onChange,\n  error,\n  readOnly = false,\n  mdSize = 12,\n  type = \"text\",\n  required = true,\n  uppercase = false,\n  inputClassName = \"\",\n}) {\n  return (\n    <>\n      <CCol className=\"mb-3\" xs={12} md={mdSize}>\n        <CFormLabel\n          htmlFor={name}\n          className={uppercase ? \"uppercase\" : \"\"}\n        >{`${label}${required ? \"*\" : \"\"}`}</CFormLabel>\n        <CFormTextarea\n          type={type}\n          className={`!bg-white ${inputClassName}`}\n          readOnly={readOnly}\n          id={name}\n          name={name}\n          onChange={onChange}\n          value={value}\n          invalid={error ? true : false}\n          placeholder={placeholder}\n          rows=\"4\"\n        />\n        <CFormFeedback invalid>{error}</CFormFeedback>\n      </CCol>\n    </>\n  );\n}\n\nexport function CustomCFormFilesGroup({\n  label,\n  name,\n  placeholder,\n  onChange,\n  error,\n  readOnly = false,\n  mdSize = 12,\n  type = \"file\",\n  required = true,\n  multiple = true,\n  uppercase = false,\n  inputClassName = \"\",\n}) {\n  return (\n    <>\n      <CCol className=\"mb-3\" xs={12} md={mdSize}>\n        <CFormLabel\n          htmlFor={name}\n          className={uppercase ? \"uppercase\" : \"\"}\n        >{`${label}${required ? \"*\" : \"\"}`}</CFormLabel>\n        <CFormInput\n          type={type}\n          className={`!bg-white ${inputClassName}`}\n          readOnly={readOnly}\n          id={name}\n          name={name}\n          onChange={onChange}\n          // required={required}\n          invalid={error ? true : false}\n          placeholder={placeholder}\n          multiple={multiple}\n        />\n        <CFormFeedback invalid>{error}</CFormFeedback>\n      </CCol>\n    </>\n  );\n}\n\nexport function CustomCFormSelectGroup({\n  label,\n  name,\n  placeholder,\n  onChange,\n  error,\n  mdSize = 12,\n  required = true,\n  uppercase = false,\n  inputClassName = \"\",\n  options,\n  value,\n  defaultValue,\n}) {\n  return (\n    <>\n      <CCol className=\"mb-3\" xs={12} md={mdSize}>\n        <CFormLabel\n          htmlFor={name}\n          className={uppercase ? \"uppercase\" : \"\"}\n        >{`${label}${required ? \"*\" : \"\"}`}</CFormLabel>\n        <CFormSelect\n          className={`!bg-white ${inputClassName}`}\n          name={name}\n          defaultValue={defaultValue}\n          onChange={onChange}\n          aria-label=\"Default select example\"\n          invalid={error ? true : false}\n          value={value}\n        >\n          <option>Open this select menu</option>\n          {options.map((option, index) => (\n            <option key={index} value={option.value}>\n              {option.label}\n            </option>\n          ))}\n        </CFormSelect>\n        <CFormFeedback invalid>{error}</CFormFeedback>\n      </CCol>\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport Joi from \"joi\";\nimport { CButton, CFormSwitch } from \"@coreui/react\";\nimport _ from \"lodash\";\nimport { useTranslation } from \"react-i18next\";\nimport { isPossiblePhoneNumber } from \"react-phone-number-input\";\n\nimport { convertFirestoreDateToDate } from \"src/services/firebase\";\nimport { userServices } from \"src/services\";\nimport { countryArray } from \"src/utils\";\nimport { convertTZ } from \"src/utils\";\nimport { selectors } from \"src/store\";\n\nimport { Modal } from \"src/components\";\nimport {\n  CustomCFormInputGroup,\n  CustomCFormSelectGroup,\n  CustomCFormPhoneNumberInputGroup,\n} from \"src/components/common/CustomCInputGroup\";\n\n/**\n * Profile page\n */\nconst ProfilePage = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const { t } = useTranslation();\n  const userData = useSelector(selectors.user.selectUserData);\n\n  const [loading, setLoading] = useState(false);\n  const [formData, setFormData] = useState(userData);\n  const [initialAccount, setInitialAccount] = useState(userData);\n  const [formErrors, setFormErrors] = useState({});\n  const [updateMode, setUpdateMode] = useState(false);\n  const [modalVisible, setModalVisible] = useState(false);\n\n  // Modal related states\n  const [modalVisibility, setModalVisibility] = useState(false);\n  console.log(userData);\n\n  useEffect(() => {\n    setFormData(userData);\n    setInitialAccount(userData);\n  }, [userData]);\n\n  // Joi schema\n  const schema = Joi.object({\n    fullName: Joi.string().optional().label(\"Full name\"),\n    country: Joi.string().optional().label(\"Country\"),\n    dob: Joi.date().optional().allow(\"\").label(\"Date of birth\").max(\"now\"),\n    email: Joi.string()\n      .email({ tlds: { allow: false } })\n      .optional()\n      .allow(\"\")\n      .label(\"Email\"),\n    phoneNumber: Joi.string().optional().label(\"Phone number\"),\n  });\n\n  /*\n   * Handlers\n   */\n  const handleChange = (e) => {\n    const { name, value, files } = e.target;\n\n    delete formErrors[name];\n    setFormData({ ...formData, [name]: value });\n  };\n\n  const handlePhoneChange = (value) => {\n    delete formErrors[\"phoneNumber\"];\n    setFormData({ ...formData, phoneNumber: value });\n  };\n\n  // Handle update account button click\n  const handleSubmit = async (e) => {\n    if (!updateMode) {\n      return;\n    }\n    const updatedData = _.pick(formData, [\n      \"fullName\",\n      \"country\",\n      \"email\",\n      \"phoneNumber\",\n      \"dob\",\n    ]);\n    setLoading(true);\n    const { error, value } = schema.validate(updatedData, {\n      abortEarly: false,\n    });\n    let phoneError = false;\n    console.log(formData.phoneNumber != \"\");\n    if (\n      formData.phoneNumber != \"\" &&\n      !isPossiblePhoneNumber(formData.phoneNumber)\n    ) {\n      setLoading(false);\n      setFormErrors({ ...formErrors, phoneNumber: \"Invalid phone number\" });\n      phoneError = true;\n    }\n    if (!error && !phoneError) {\n      try {\n        await userServices.updateAdmin(userData.userID, updatedData);\n        setInitialAccount(updatedData);\n        setFormData(updatedData);\n        toast.success(t(\"common_success\"));\n      } catch (error) {\n        console.log(error);\n        toast.error(`${t(\"common_error\")}`);\n      } finally {\n        setLoading(false);\n      }\n    } else {\n      const errors = {};\n      for (let item of error.details) {\n        errors[item.path[0]] = item.message;\n      }\n      setFormErrors({ ...formErrors, ...errors });\n      setLoading(false);\n    }\n  };\n\n  // Handle update phone number button click.\n  const handleUpdatePhoneNumber = async () => {\n\n  }\n\n  return (\n    <>\n      <div className=\"shadow sm:rounded-lg bg-white p-4 mt-2 mb-5 row g-3\">\n        <div className=\"grid justify-end\">\n          <CFormSwitch\n            //   size=\"xl\"\n            label=\"Enable Update Mode\"\n            id=\"formSwitchCheckDefault\"\n            onChange={() => {\n              setUpdateMode(!updateMode);\n              setFormData(initialAccount);\n            }}\n          />\n        </div>\n        <div className=\"row g-3\">\n          {CustomCFormInputGroup({\n            label: t(\"full_name\"),\n            name: \"fullName\",\n            value: formData.fullName,\n            onChange: handleChange,\n            error: formErrors.fullName,\n            uppercase: true,\n            required: false,\n            readOnly: !updateMode,\n          })}\n\n          {CustomCFormInputGroup({\n            label: t(\"email_address\"),\n            name: \"email\",\n            value: formData.email,\n            onChange: handleChange,\n            error: formErrors.email,\n            uppercase: true,\n            required: false,\n            readOnly: !updateMode,\n          })}\n          {CustomCFormInputGroup({\n            label: t(\"date_of_birth\"),\n            name: \"dob\",\n            value: convertTZ(formData.dob),\n            onChange: handleChange,\n            error: formErrors.dob,\n            uppercase: true,\n            required: false,\n            readOnly: !updateMode,\n            mdSize: 6,\n            type: \"date\",\n          })}\n          {updateMode ? (\n            <CustomCFormPhoneNumberInputGroup\n              label={t(\"phone_number\")}\n              name=\"phoneNumber\"\n              value={formData.phoneNumber}\n              onChange={handlePhoneChange}\n              error={formErrors.phoneNumber}\n              uppercase={true}\n              mdSize={6}\n            />\n          ) : (\n            <CustomCFormInputGroup\n              label={t(\"phone_number\")}\n              name=\"phoneNumber\"\n              value={formData.phoneNumber}\n              uppercase={true}\n              required={false}\n              readOnly={!updateMode}\n              mdSize={6}\n            />\n          )}\n\n          {updateMode\n            ? CustomCFormSelectGroup({\n                label: t(\"country\"),\n                name: \"country\",\n                value: formData.country,\n                onChange: handleChange,\n                error: formErrors.country,\n                uppercase: true,\n                required: false,\n                readOnly: !updateMode,\n                options: countryArray,\n                mdSize: 6,\n              })\n            : CustomCFormInputGroup({\n                label: t(\"country\"),\n                name: \"country\",\n                value: formData.country,\n                onChange: handleChange,\n                error: formErrors.country,\n                uppercase: true,\n                required: false,\n                readOnly: !updateMode,\n                mdSize: 6,\n              })}\n        </div>\n        <div className=\"flex justify-end\" hidden={!updateMode}>\n          <div className=\"justify-end\">\n            <CButton\n              color=\"primary\"\n              variant=\"outline\"\n              className=\"mr-2\"\n              onClick={handleSubmit}\n            >\n              {t(\"update\")}\n            </CButton>\n            <CButton\n              color=\"primary\"\n              variant=\"outline\"\n              className=\"mr-2\"\n              onClick={handleUpdatePhoneNumber}\n            >\n              {t(\"update_phone_number\")}\n            </CButton>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ProfilePage;\n\nconst initialState = {\n  fullName: \"\",\n  email: \"\",\n  phoneNumber: \"\",\n  country: \"\",\n};\n"],"names":["CustomCFormInputGroup","label","name","placeholder","value","onChange","error","readOnly","mdSize","type","required","multiple","uppercase","inputClassName","className","xs","md","htmlFor","disabled","id","invalid","CustomCFormPhoneNumberInputGroup","defaultCountry","style","width","borderColor","padding","marginBottom","height","borderWidth","borderStyle","CustomCFormSelectGroup","options","defaultValue","map","option","index","useDispatch","useHistory","t","useTranslation","userData","useSelector","selectors","useState","setLoading","formData","setFormData","initialAccount","setInitialAccount","formErrors","setFormErrors","updateMode","setUpdateMode","console","log","useEffect","schema","Joi","fullName","optional","country","dob","allow","max","email","tlds","phoneNumber","handleChange","e","target","files","handleSubmit","updatedData","_","validate","abortEarly","phoneError","isPossiblePhoneNumber","userServices","userID","toast","errors","details","item","path","message","handleUpdatePhoneNumber","convertTZ","countryArray","hidden","color","variant","onClick"],"sourceRoot":""}