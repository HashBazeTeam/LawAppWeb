{"version":3,"file":"static/js/935.99d5ec2f.chunk.js","mappings":"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","sources":["models/types.js","views/chat/Chat.js"],"sourcesContent":["export const QuestionStatus = {\n    yetToBePicked: \"Yet to be picked\",\n    ongoing: \"Ongoing\",\n    answered: \"Answered\",\n    timeUP: \"Time up\",\n    assistance: \"Assistance\",\n    ended: \"Ended\",\n}","import React, { useEffect, useState, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { LinkIcon } from \"@heroicons/react/solid\";\nimport { toast } from \"react-toastify\";\nimport { useTranslation } from \"react-i18next\";\nimport { MessageList, Input, Button } from \"react-chat-elements\";\nimport CIcon from \"@coreui/icons-react\";\nimport { CButton } from \"@coreui/react\";\nimport { cilSearch } from \"@coreui/icons\";\nimport { QuestionStatus } from \"src/models/types\";\n\n// Custom imports\nimport { Modal } from \"src/components\";\nimport { saveImg } from \"src/utils/function\";\nimport {\n  collection,\n  query,\n  where,\n  onSnapshot,\n  firestore,\n  doc,\n} from \"src/services/firebase\";\nimport { selectors } from \"src/store\";\nimport { questionServices, userServices } from \"src/services\";\n\n/**\n * Single Chat User Interface\n */\nexport default function Chat(props) {\n  const history = useHistory();\n  const { t } = useTranslation();\n  const question = props.location.state.question; // Get the question from the previous page.\n  const inputRef = useRef(null);\n  const scrollViewRef = useRef();\n  const textRef = useRef();\n\n  // Selector\n  const userID = useSelector(selectors.user.selectUserID);\n\n  // States\n  const [messages, setMessages] = useState([]);\n  const [formData, setFormData] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [file, setFile] = useState(null);\n  const [fcmTokens, setFCMTokens] = useState([]);\n  const [modalVisible, setModalVisible] = useState(false);\n  const [showSubmitButton, setShowSubmitButton] = useState(false);\n  const [questionStatus, setQuestionStatus] = useState(question.status);\n\n  // Get messages from the firestore\n  useEffect(() => {\n    const q = query(\n      collection(firestore, \"Question\", question.questionID, \"chat\")\n    );\n    const unsubscribe = onSnapshot(q, (querySnapshot) => {\n      const chats = [];\n      querySnapshot.forEach((doc) => {\n        const chat = doc.data();\n        const chatPosition =\n          chat.author.id == question.clientID ? \"left\" : \"right\";\n\n        // Get the chat type\n        let chatType = \"text\";\n        switch (chat.type) {\n          case \"image\":\n            chatType = \"photo\";\n            break;\n          case \"file\":\n            chatType = \"file\";\n            break;\n          default:\n            chatType = \"text\";\n            break;\n        }\n\n        // Get the class name according to the side and data type\n        let classNames = \"py-2 text-black text-lg\";\n        if (chatPosition == \"left\") {\n          if (chat.type == \"image\") {\n            classNames += \" mr-[60%]\";\n          } else {\n            classNames += \" mr-16\";\n          }\n        } else {\n          if (chat.type == \"image\") {\n            classNames += \" ml-[60%]\";\n          } else {\n            classNames += \" ml-16\";\n          }\n        }\n\n        const chatModel = {\n          position: chatPosition,\n          type: chatType,\n          id: chat.id,\n          date: new Date(chat.createdAt),\n          className: classNames,\n          // className: chatPosition == \"py-2 mr-16 \",\n          text: chat.text ? chat.text : chat.name,\n          title: chatPosition == \"left\" ? \"Client\" : \"Admin\",\n          data: {\n            uri: chat.uri,\n            className: \"w-40\",\n            // uri: \"https://picsum.photos/200\",\n            status: {\n              click: false,\n              loading: 0,\n            },\n          },\n        };\n        chats.push(chatModel);\n      });\n      setMessages(chats);\n      if (chats.length > 0) {\n        scrollToBottom();\n      }\n\n      questionServices.updateQuestion(question.questionID, {\n        isReadAdmin: true, // When the admin come to the chat, seen status is changed.\n      });\n    });\n\n    return unsubscribe;\n  }, []);\n\n  // Listen to question status\n  useEffect(() => {\n    const q = query(doc(firestore, \"Question\", question.questionID));\n    const unsubscribe = onSnapshot(q, (querySnapshot) => {\n      setQuestionStatus(querySnapshot.data().status);\n      // Make the submit answer button disabled if the question is answered\n      if (querySnapshot.data().status == QuestionStatus.ended) {\n        setShowSubmitButton(false);\n      } else {\n        setShowSubmitButton(true);\n      }\n    });\n\n    return unsubscribe;\n  }, []);\n\n  // Get client details from the firestore\n  useEffect(() => {\n    const fetchData = async () => {\n      const client = await userServices.getUserByID(question.clientID);\n      const tokens = Object.values(client.fcmToken).filter(\n        (token) => token != null && token != undefined && token != \"\"\n      );\n      setFCMTokens(tokens);\n    };\n    fetchData().catch((err) => {\n      console.log(err);\n    });\n  }, []);\n\n  /**\n   * Handlers\n   */\n  const handleAttachIconClick = () => {\n    inputRef.current.click();\n  };\n\n  const handleChange = (e) => {\n    setFormData(e.target.value);\n  };\n\n  const handleFileInputChange = async (e) => {\n    const file = e.target.files?.[0];\n    if (!file) return;\n    const msgTime = new Date().valueOf();\n    const TWENTY_MB = 1024 * 1024 * 20;\n\n    if (file.size > TWENTY_MB) {\n      toast.error(\"Max file size is 20MB\");\n      return;\n    }\n    // Check file type\n    let fileType = \"image\";\n    if (file.type.startsWith(\"image\")) {\n      fileType = \"image\";\n    } else {\n      fileType = \"file\";\n    }\n\n    const chat = {\n      author: { id: userID },\n      createdAt: msgTime,\n      id: msgTime.toString(),\n      type: fileType,\n      name: file.name,\n      size: file.size,\n      height: 720,\n      width: 1140,\n      mimeType: file.type,\n    };\n\n    try {\n      if (question.status == \"Yet to be picked\") {\n        await questionServices.updateQuestion(question.questionID, {\n          status: \"Ongoing\",\n          isReadClient: false, // When a new msg is sent change the read status of client message\n          adminID: userID,\n          updateAt: new Date(),\n        });\n      } else {\n        await questionServices.updateQuestion(question.questionID, {\n          isReadClient: false, // When a new msg is sent change the read status of client message\n          adminID: userID,\n          updateAt: new Date(),\n        });\n      }\n\n      await questionServices.addChatFileToQuestion(\n        question.questionID,\n        file,\n        chat\n      );\n      await questionServices.sendChatNotification(\n        fcmTokens,\n        question.questionID\n      );\n    } catch (error) {\n      console.log(error);\n      toast.error(\"Error uploading file\");\n    }\n  };\n\n  // Handle send btn pressed\n  const handleSend = async (e) => {\n    e.preventDefault();\n    if (formData == \"\" || !formData) return;\n    const msgTime = new Date().valueOf();\n    const chat = {\n      author: { id: userID },\n      createdAt: msgTime,\n      id: msgTime.toString(),\n      type: \"text\",\n      text: formData,\n    };\n\n    try {\n      if (question.status == \"Yet to be picked\") {\n        await questionServices.updateQuestion(question.questionID, {\n          status: \"Ongoing\",\n          isReadClient: false, // When a new msg is sent change the read status of client message\n          adminID: userID,\n          updateAt: new Date(),\n        });\n      } else {\n        await questionServices.updateQuestion(question.questionID, {\n          isReadClient: false, // When a new msg is sent change the read status of client message\n          adminID: userID,\n          updateAt: new Date(),\n        });\n      }\n\n      await questionServices.addChatToQuestion(question.questionID, chat);\n      textRef.current.value = \"\";\n\n      await questionServices.sendChatNotification(\n        fcmTokens,\n        question.questionID\n      );\n      // Clear form data after the message is sent\n      setFormData(\"\");\n    } catch (error) {\n      console.log(error);\n    }\n    scrollToBottom();\n  };\n\n  // Handle submit answer button\n  const handleSubmitAnswerBtnPressed = async (e) => {\n    setLoading(true);\n    e.preventDefault();\n\n    let newStatus = QuestionStatus.ongoing;\n    let answerDateTime;\n    let successMessage;\n\n    switch (questionStatus) {\n      case QuestionStatus.yetToBePicked:\n        newStatus = QuestionStatus.ongoing;\n        successMessage = t(\"question_has_been_picked\");\n        break;\n      case QuestionStatus.ongoing:\n        newStatus = QuestionStatus.answered;\n        answerDateTime = new Date();\n        successMessage = t(\"question_has_been_answered\");\n        break;\n      case QuestionStatus.answered:\n        newStatus = QuestionStatus.answered;\n        answerDateTime = new Date();\n        successMessage = t(\"question_has_been_answered\");\n        break;\n      case QuestionStatus.timeUP:\n        newStatus = QuestionStatus.ended;\n        successMessage = t(\"question_has_been_ended\");\n        break;\n      case QuestionStatus.assistance:\n        newStatus = QuestionStatus.ended;\n        successMessage = t(\"question_has_been_ended\");\n        break;\n      default:\n        successMessage = t(\"question_has_been_updated\");\n        break;\n    }\n\n    try {\n      if (answerDateTime) {\n        await questionServices.updateQuestion(question.questionID, {\n          status: newStatus,\n          answerDateTime: new Date(),\n          updateAt: new Date(),\n        });\n      } else {\n        await questionServices.updateQuestion(question.questionID, {\n          status: newStatus,\n          updateAt: new Date(),\n        });\n      }\n\n      setQuestionStatus(newStatus);\n      toast.success(t(successMessage));\n    } catch (error) {\n      setLoading(false);\n      toast.error(t(\"common_error\"));\n    }\n\n    setModalVisible(false);\n    setLoading(false);\n  };\n\n  // When the question is answered and user want to answer again, enable the submit answer button\n  const handleAnswerAgainBtnPressed = async (e) => {\n    await handleSubmitAnswerBtnPressed(e);\n    setModalVisible(false);\n  };\n\n  // Handle file/image download\n  const handleFileDownload = async (fileURI, fileName) => {\n    await saveImg(fileURI, fileName);\n  };\n\n  const scrollToBottom = () => {\n    scrollViewRef.current.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  // Submit button text\n  const submitBtnText = () => {\n    switch (questionStatus) {\n      case QuestionStatus.yetToBePicked:\n        return t(\"select_question\");\n        break;\n      case QuestionStatus.assistance:\n        return t(\"finish\");\n        break;\n      case QuestionStatus.ended:\n        return t(\"ended\");\n        break;\n      case QuestionStatus.answered:\n        return t(\"resubmit_answer\");\n        break;\n      case QuestionStatus.timeUP:\n        return t(\"finish\");\n      default:\n        return t(\"submit_answer\");\n        break;\n    }\n  };\n\n  // Submit button color\n  const submitBtnColor = () => {\n    switch (questionStatus) {\n      case QuestionStatus.ended:\n        return \"grey\";\n        break;\n      default:\n        return \"Green\";\n        break;\n    }\n  };\n\n  // Is modal requires\n  const isModalRequired = () => {\n    console.log(\"Modal\", questionStatus);\n    switch (questionStatus) {\n      case QuestionStatus.answered:\n        return true;\n      case QuestionStatus.timeUP:\n        return true;\n      case QuestionStatus.assistance:\n        return true;\n      default:\n        return false;\n    }\n  };\n\n  const generateModalTexts = () => {\n    switch (questionStatus) {\n      case QuestionStatus.answered:\n        return {\n          title: t(\"resubmit_answer\"),\n          body: t(\"are_you_sure_you_want_to_resubmit\"),\n          successLabel: t(\"resubmit\"),\n        };\n      case QuestionStatus.timeUP:\n        return {\n          title: t(\"end_the_chat\"),\n          body: t(\"are_you_sure_you_want_to_end\"),\n          successLabel: t(\"finish\"),\n        };\n      case QuestionStatus.assistance:\n        return {\n          title: t(\"end_the_chat\"),\n          body: t(\"are_you_sure_you_want_to_end\"),\n          successLabel: t(\"finish\"),\n        };\n      default:\n        return {\n          title: t(\"end_the_chat\"),\n          body: t(\"are_you_sure_you_want_to_end\"),\n          successLabel: t(\"finish\"),\n        };\n    }\n  };\n\n  return (\n    <>\n      <div className=\"col-span-1 py-2 flex justify-center align-middle bg-slate-50\">\n        <div className=\"mx-2 px-2\">\n          <Modal\n            modalVisible={modalVisible}\n            setModalVisible={setModalVisible}\n            successCallback={(e) => handleAnswerAgainBtnPressed(e)}\n            successLabel={generateModalTexts().successLabel}\n            title={generateModalTexts().title}\n            body={generateModalTexts().body}\n          />\n        </div>\n\n        <CButton\n          className=\" text-md\"\n          color=\"primary\"\n          variant=\"outline\"\n          onClick={() =>\n            history.push({\n              pathname: \"/law-admin/question/pool\",\n              state: {\n                client: {\n                  clientID: question.clientID,\n                  clientName: question.clientName,\n                },\n              },\n            })\n          }\n        >\n          <CIcon icon={cilSearch} />{\" \"}\n          <span className=\"text-sm\">{t(\"show_previous_questions\")}</span>\n        </CButton>\n      </div>\n      <div\n        className={`mb-4 columns-1 flex flex-col justify-between \n      h-screen bg-slate-50 overflow-y-scroll w-full`}\n      >\n        {/* <SystemMessage text={\"Sample System message!\"} /> */}\n        <MessageList\n          className=\"message-list m-1\"\n          lockable={true}\n          toBottomHeight={\"100%\"}\n          dataSource={messages}\n          onDownload={(item) => handleFileDownload(item.data.uri, item.text)}\n        />\n\n        <div ref={scrollViewRef}></div>\n\n        <div className=\"mb-0  mx-1 sticky bottom-0 grid grid-cols-8 align-middle justify-center \">\n          <div className=\"col-span-8 ml-4 shadow border-b border-gray-200\">\n            <Input\n              referance={textRef}\n              className=\"m-1 p-1\"\n              defaultValue={formData}\n              // clear={(e) => handleClear(e)}\n              onChange={handleChange}\n              placeholder=\"Type here...\"\n              multiline={true}\n              rightButtons={\n                <div>\n                  <Button\n                    className=\"mx-2 px-4\"\n                    color=\"white\"\n                    text=\"Send\"\n                    onClick={handleSend}\n                    disabled={formData == \"\" || !formData}\n                    backgroundColor={\n                      formData == \"\" || !formData ? \"grey\" : \"black\"\n                    }\n                  />\n                  <Button\n                    disabled={!showSubmitButton}\n                    className=\"px-4\"\n                    color=\"white\"\n                    backgroundColor={submitBtnColor()}\n                    text={submitBtnText()}\n                    onClick={(e) => {\n                      console.log(questionStatus, isModalRequired());\n\n                      if (isModalRequired()) {\n                        setModalVisible(true);\n                      } else {\n                        setShowSubmitButton(false);\n                        handleSubmitAnswerBtnPressed(e);\n                      }\n                    }}\n                  />\n                </div>\n              }\n              leftButtons={\n                <button\n                  id=\"recaptcha-container\"\n                  disabled={false}\n                  onClick={handleAttachIconClick}\n                  type=\"submit\"\n                  className={`group relative w-full flex justify-center py-1 px-4\n                    border-transparent text-sm font-medium text-black \n                    `}\n                >\n                  <input\n                    style={{ display: \"none\" }}\n                    ref={inputRef}\n                    type=\"file\"\n                    onChange={handleFileInputChange}\n                  />\n                  <span className=\"absolute left-0 inset-y-0 flex items-center pl-3\">\n                    <LinkIcon className=\"h-5 w-5\" aria-hidden=\"true\" />\n                  </span>\n                </button>\n              }\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n"],"names":["QuestionStatus","yetToBePicked","ongoing","answered","timeUP","assistance","ended","Chat","props","history","useHistory","t","useTranslation","question","location","state","inputRef","useRef","scrollViewRef","textRef","userID","useSelector","selectors","useState","messages","setMessages","formData","setFormData","setLoading","fcmTokens","setFCMTokens","modalVisible","setModalVisible","showSubmitButton","setShowSubmitButton","status","questionStatus","setQuestionStatus","useEffect","q","query","collection","firestore","questionID","onSnapshot","querySnapshot","chats","forEach","doc","chat","data","chatPosition","author","id","clientID","chatType","type","classNames","chatModel","position","date","Date","createdAt","className","text","name","title","uri","click","loading","push","length","scrollToBottom","questionServices","isReadAdmin","fetchData","userServices","client","tokens","Object","values","fcmToken","filter","token","undefined","catch","err","console","log","handleFileInputChange","e","file","target","files","msgTime","valueOf","size","toast","fileType","startsWith","toString","height","width","mimeType","isReadClient","adminID","updateAt","handleSend","preventDefault","current","value","handleSubmitAnswerBtnPressed","newStatus","successMessage","answerDateTime","handleAnswerAgainBtnPressed","handleFileDownload","fileURI","fileName","saveImg","scrollIntoView","behavior","isModalRequired","generateModalTexts","body","successLabel","successCallback","color","variant","onClick","pathname","clientName","icon","cilSearch","lockable","toBottomHeight","dataSource","onDownload","item","ref","referance","defaultValue","onChange","placeholder","multiline","rightButtons","disabled","backgroundColor","submitBtnText","leftButtons","style","display"],"sourceRoot":""}