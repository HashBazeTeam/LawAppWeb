{"version":3,"file":"static/js/54.691ac0e8.chunk.js","mappings":"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","sources":["models/types.js","views/chat/Chat.js","../node_modules/typescript/lib|sync"],"sourcesContent":["export const QuestionStatus = {\n    yetToBePicked: \"Yet to be picked\",\n    ongoing: \"Ongoing\",\n    answered: \"Answered\",\n    timeUP: \"Time up\",\n    assistance: \"Assistance\",\n    ended: \"Ended\",\n}","import React, { useEffect, useState, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport Joi from \"joi\";\nimport { LinkIcon } from \"@heroicons/react/solid\";\nimport { toast } from \"react-toastify\";\nimport { useTranslation } from \"react-i18next\";\nimport { MessageList, Input, Button, MessageBox } from \"react-chat-elements\";\nimport { SystemMessage } from \"react-chat-elements\";\nimport CIcon from \"@coreui/icons-react\";\nimport { CButton } from \"@coreui/react\";\nimport { cilSearch } from \"@coreui/icons\";\nimport { QuestionStatus } from \"src/models/types\";\n\n// Custom imports\nimport { LoadingIndicator } from \"src/components\";\nimport { saveImg } from \"src/utils/function\";\nimport {\n  collection,\n  query,\n  where,\n  onSnapshot,\n  firestore,\n} from \"src/services/firebase\";\nimport { selectors } from \"src/store\";\nimport { questionServices, userServices } from \"src/services\";\nimport { textSpanContainsTextSpan } from \"typescript\";\n\n/**\n * Single Chat User Interface\n */\nexport default function Chat(props) {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n  const screenHeight = window.innerHeight - 128; // Due to purge issue tailwind css doesn't detect variable changes.\n  const question = props.location.state.question; // Get the question from the previous page.\n  const inputRef = useRef(null);\n  const scrollViewRef = useRef();\n  const textRef = useRef();\n\n  // Selector\n  const userID = useSelector(selectors.user.selectUserID);\n\n  // States\n  const [messages, setMessages] = useState([]);\n  const [formData, setFormData] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [file, setFile] = useState(null);\n  const [fcmTokens, setFCMTokens] = useState([]);\n\n  // Get messages from the firestore\n  useEffect(() => {\n    const q = query(\n      collection(firestore, \"Question\", question.questionID, \"chat\")\n    );\n    const unsubscribe = onSnapshot(q, (querySnapshot) => {\n      const chats = [];\n      querySnapshot.forEach((doc) => {\n        const chat = doc.data();\n        const chatPosition =\n          chat.author.id == question.clientID ? \"left\" : \"right\";\n\n        // Get the chat type\n        let chatType = \"text\";\n        switch (chat.type) {\n          case \"image\":\n            chatType = \"photo\";\n            break;\n          case \"file\":\n            chatType = \"file\";\n            break;\n          default:\n            chatType = \"text\";\n            break;\n        }\n\n        // Get the class name according to the side and data type\n        let classNames = \"py-2 text-black text-lg\";\n        if (chatPosition == \"left\") {\n          if (chat.type == \"image\") {\n            classNames += \" mr-[60%]\";\n          } else {\n            classNames += \" mr-16\";\n          }\n        } else {\n          if (chat.type == \"image\") {\n            classNames += \" ml-[60%]\";\n          } else {\n            classNames += \" ml-16\";\n          }\n        }\n\n        const chatModel = {\n          position: chatPosition,\n          type: chatType,\n          id: chat.id,\n          date: new Date(chat.createdAt),\n          className: classNames,\n          // className: chatPosition == \"py-2 mr-16 \",\n          text: chat.text ? chat.text : chat.name,\n          title: chatPosition == \"left\" ? \"Client\" : \"Admin\",\n          data: {\n            uri: chat.uri,\n            className: \"w-40\",\n            // uri: \"https://picsum.photos/200\",\n            status: {\n              click: false,\n              loading: 0,\n            },\n          },\n        };\n        chats.push(chatModel);\n      });\n      setMessages(chats);\n      questionServices.updateQuestion(question.questionID, {\n        isReadAdmin: true, // When the admin come to the chat, seen status is changed.\n      });\n    });\n\n    return unsubscribe;\n  }, []);\n\n  // Get client details from the firestore\n  useEffect(() => {\n    const fetchData = async () => {\n      const client = await userServices.getUserByID(question.clientID);\n      console.log(client);\n      const tokens = Object.values(client.fcmToken).filter(\n        (token) => token != null && token != undefined && token != \"\"\n      );\n      setFCMTokens(tokens);\n    };\n    fetchData().catch((err) => {\n      console.log(err);\n    });\n  }, []);\n\n  // Scroll to the bottom of the chat\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  // Show submit answer button when the status in not answered\n  const showSubmitButton =\n    question.status == QuestionStatus.yetToBePicked ||\n    question.status == QuestionStatus.ongoing;\n\n  /**\n   * Handlers\n   */\n  const handleAttachIconClick = () => {\n    inputRef.current.click();\n  };\n\n  const handleChange = (e) => {\n    setFormData(e.target.value);\n  };\n\n  const handleFileInputChange = async (e) => {\n    const file = e.target.files?.[0];\n    if (!file) return;\n    const msgTime = new Date().valueOf();\n    const TWENTY_MB = 1024 * 1024 * 20;\n\n    if (file.size > TWENTY_MB) {\n      toast.error(\"Max file size is 20MB\");\n      return;\n    }\n    // Check file type\n    let fileType = \"image\";\n    if (file.type.startsWith(\"image\")) {\n      fileType = \"image\";\n    } else {\n      fileType = \"file\";\n    }\n\n    const chat = {\n      author: { id: userID },\n      createdAt: msgTime,\n      id: msgTime.toString(),\n      type: fileType,\n      name: file.name,\n      size: file.size,\n      height: 720,\n      width: 1140,\n      mimeType: file.type,\n    };\n\n    try {\n      if (question.status == \"Yet to be picked\") {\n        await questionServices.updateQuestion(question.questionID, {\n          status: \"Ongoing\",\n          isReadClient: false, // When a new msg is sent change the read status of client message\n          adminID: userID,\n        });\n      } else {\n        await questionServices.updateQuestion(question.questionID, {\n          isReadClient: false, // When a new msg is sent change the read status of client message\n          adminID: userID,\n        });\n      }\n\n      await questionServices.addChatFileToQuestion(\n        question.questionID,\n        file,\n        chat\n      );\n      await questionServices.sendChatNotification(fcmTokens, question.questionID);\n    } catch (error) {\n      console.log(error);\n      toast.error(\"Error uploading file\");\n    }\n  };\n\n  // Handle send btn pressed\n  const handleSend = async (e) => {\n    e.preventDefault();\n    if (formData == \"\" || !formData) return;\n    const msgTime = new Date().valueOf();\n    const chat = {\n      author: { id: userID },\n      createdAt: msgTime,\n      id: msgTime.toString(),\n      type: \"text\",\n      text: formData,\n    };\n\n    try {\n      if (question.status == \"Yet to be picked\") {\n        await questionServices.updateQuestion(question.questionID, {\n          status: \"Ongoing\",\n          isReadClient: false, // When a new msg is sent change the read status of client message\n          adminID: userID,\n        });\n      } else {\n        await questionServices.updateQuestion(question.questionID, {\n          isReadClient: false, // When a new msg is sent change the read status of client message\n          adminID: userID,\n        });\n      }\n\n      await questionServices.addChatToQuestion(question.questionID, chat);\n      textRef.current.value = \"\";\n\n      await questionServices.sendChatNotification(fcmTokens, question.questionID);\n    } catch (error) {\n      console.log(error);\n    }\n    scrollToBottom();\n  };\n\n  // Handle submit answer button\n  const handleSubmitAnswerBtnPressed = async () => {\n    if (question.status == \"Answered\") return;\n    setLoading(true);\n\n    // If the status in assistance change the status.\n    if (question.status == \"Assistance\") {\n      try {\n        await questionServices.updateQuestion(question.questionID, {\n          status: \"Ended\",\n        });\n      } catch (error) {\n        setLoading(false);\n        toast.error(t(\"common_error\"));\n      }\n    } else {\n      try {\n        await questionServices.updateQuestion(question.questionID, {\n          status: \"Answered\",\n        });\n        const msgTime = new Date().valueOf();\n        const chat = {\n          author: { id: userID },\n          createdAt: msgTime,\n          id: msgTime.toString(),\n          type: \"text\",\n          text: \"Answered the question.\",\n        };\n        await questionServices.updateQuestion(question.questionID, {\n          isReadStatus: false,\n          isReadClient: false, // When a new msg is sent change the read status of client message\n        });\n        await questionServices.addChatToQuestion(question.questionID, chat);\n      } catch (error) {\n        setLoading(false);\n        toast.error(t(\"common_error\"));\n      }\n      setLoading(false);\n    }\n  };\n\n  // Handle file/image download\n  const handleFileDownload = async (fileURI, fileName) => {\n    await saveImg(fileURI, fileName);\n  };\n\n  const scrollToBottom = () => {\n    scrollViewRef.current.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  const handleClear = (e) => {\n    console.log(e);\n    e.target.value = \"\";\n    return;\n  };\n\n  return (\n    <>\n      <div className=\"col-span-1 py-2 flex justify-center align-middle bg-slate-50\">\n        <CButton\n          className=\" text-md\"\n          color=\"primary\"\n          variant=\"outline\"\n          onClick={() =>\n            history.push({\n              pathname: \"/law-admin/question/pool\",\n              state: {\n                client: {\n                  clientID: question.clientID,\n                  clientName: question.clientName,\n                },\n              },\n            })\n          }\n        >\n          <CIcon icon={cilSearch} />{\" \"}\n          <span className=\"text-sm\">{t(\"show_previous_questions\")}</span>\n        </CButton>\n      </div>\n      <div\n        className={`mb-4 columns-1 flex flex-col justify-between \n      h-screen bg-slate-50 overflow-y-scroll w-full`}\n      >\n        {/* <SystemMessage text={\"Sample System message!\"} /> */}\n        <MessageList\n          className=\"message-list m-1\"\n          lockable={true}\n          toBottomHeight={\"100%\"}\n          dataSource={messages}\n          onDownload={(item) => handleFileDownload(item.data.uri, item.text)}\n        />\n\n        <div ref={scrollViewRef}></div>\n\n        <div className=\"mb-0  mx-1 sticky bottom-0 grid grid-cols-8 align-middle justify-center \">\n          <div className=\"col-span-7 ml-4 shadow border-b border-gray-200\">\n            <Input\n              referance={textRef}\n              className=\"m-1 p-1\"\n              defaultValue={formData}\n              // clear={(e) => handleClear(e)}\n              onChange={handleChange}\n              placeholder=\"Type here...\"\n              multiline={true}\n              rightButtons={\n                <Button\n                  className=\"mx-2 px-4\"\n                  color=\"white\"\n                  backgroundColor=\"black\"\n                  text=\"Send\"\n                  onClick={handleSend}\n                />\n              }\n              leftButtons={\n                <button\n                  id=\"recaptcha-container\"\n                  disabled={false}\n                  onClick={handleAttachIconClick}\n                  type=\"submit\"\n                  className={`group relative w-full flex justify-center py-1 px-4\n                    border-transparent text-sm font-medium text-black \n                    `}\n                >\n                  <input\n                    style={{ display: \"none\" }}\n                    ref={inputRef}\n                    type=\"file\"\n                    onChange={handleFileInputChange}\n                  />\n                  <span className=\"absolute left-0 inset-y-0 flex items-center pl-3\">\n                    <LinkIcon className=\"h-5 w-5\" aria-hidden=\"true\" />\n                  </span>\n                </button>\n              }\n            />\n          </div>\n          {showSubmitButton && (\n            <div className=\"col-span-1 py-2 flex justify-center align-middle\">\n              <Button\n                className=\"px-4\"\n                color=\"white\"\n                backgroundColor=\"green\"\n                text={\n                  question.status == \"Assistance\"\n                    ? t(\"finish\")\n                    : t(\"submit_answer\")\n                }\n                onClick={handleSubmitAnswerBtnPressed}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 13411;\nmodule.exports = webpackEmptyContext;"],"names":["QuestionStatus","Chat","props","history","useHistory","t","useDispatch","useTranslation","question","window","innerHeight","location","state","inputRef","useRef","scrollViewRef","textRef","userID","useSelector","selectors","useState","messages","setMessages","formData","setFormData","setLoading","fcmTokens","setFCMTokens","useEffect","q","query","collection","firestore","questionID","onSnapshot","querySnapshot","chats","forEach","doc","chat","data","chatPosition","author","id","clientID","chatType","type","classNames","chatModel","position","date","Date","createdAt","className","text","name","title","uri","status","click","loading","push","questionServices","isReadAdmin","fetchData","userServices","client","console","log","tokens","Object","values","fcmToken","filter","token","undefined","catch","err","scrollToBottom","showSubmitButton","handleFileInputChange","e","file","target","files","msgTime","valueOf","size","toast","fileType","startsWith","toString","height","width","mimeType","isReadClient","adminID","handleSend","preventDefault","current","value","handleSubmitAnswerBtnPressed","isReadStatus","handleFileDownload","fileURI","fileName","saveImg","scrollIntoView","behavior","color","variant","onClick","pathname","clientName","icon","cilSearch","lockable","toBottomHeight","dataSource","onDownload","item","ref","referance","defaultValue","onChange","placeholder","multiline","rightButtons","backgroundColor","leftButtons","disabled","style","display","LinkIcon","webpackEmptyContext","req","Error","code","keys","resolve","module","exports"],"sourceRoot":""}