{"version":3,"file":"static/js/561.57d9e8cb.chunk.js","mappings":"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","sources":["views/chat/QuestionPool.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { LockClosedIcon } from \"@heroicons/react/solid\";\nimport { toast } from \"react-toastify\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { LoadingIndicator } from \"src/components\";\nimport { deleteEmptyKeys } from \"src/utils/function\";\nimport { questionServices } from \"src/services\";\n\nconst Table = React.lazy(() => import(\"./components/Table\"));\nconst TableBody = React.lazy(() => import(\"./components/TableBody\"));\n\n/**\n * Chat Pool section to display all the questions with title and date.\n * TODO: Add a cloud function to update stat of question counts\n */\nexport default function QuestionPool(props) {\n  const { t } = useTranslation();\n  const client = props.location.state?.client; // Get the question from the previous page\n\n  const recordsPerPage = 20; // Records per page\n  const [questionList, setQuestionList] = useState([]);\n  const [maxPages, setMaxPages] = useState(0);\n  const [pageNumber, setPageNumber] = useState(1);\n  const [lastVisibleDoc, setLastVisibleDoc] = useState(null); //  Last visible document in firestore\n  const [loading, setLoading] = useState(false);\n  const [filteredData, setFilteredData] = useState([]);\n  const [filters, setFilters] = useState(filterInitialState);\n  const [filterErrors, setFilterErrors] = useState({});\n\n  /*\n   * Fetch questions\n   */\n  useEffect(() => {\n    let isSubscribed = true;\n    setLoading(true);\n    fetchData().catch((err) => {\n      console.log(err);\n      setLoading(false);\n    });\n    // Cancel any pending request\n    return () => (isSubscribed = false);\n  }, []);\n\n  /*\n   * Fetch questions when client is changed\n   */\n  useEffect(() => {\n    let isSubscribed = true;\n    setLoading(true);\n    fetchData().catch((err) => {\n      console.log(err);\n      setLoading(false);\n    });\n    setLoading(false);\n    // Cancel any pending request\n    return () => (isSubscribed = false);\n  }, [client]);\n\n  // Fetch data on page change\n  // move :- next or previous\n  // Firestore doesn't provide a way to get the previous page, so we have to use the lastVisibleDoc\n  const fetchData = async (move) => {\n    setLoading(true);\n    try {\n      let _questions;\n      let _totalCount;\n      let _lastVisible;\n\n      if (client && client.clientID != null) {\n        // Get questions by clientID\n        const { questions, totalCount, lastVisible } =\n          await questionServices.getClientQuestion(\n            client.clientID,\n            recordsPerPage,\n            lastVisibleDoc,\n            move\n          );\n        _questions = questions;\n        _totalCount = totalCount;\n        _lastVisible = lastVisible;\n      } else {\n        const { questions, totalCount, lastVisible } =\n          await questionServices.getAllQuestions(\n            filters.status,\n            recordsPerPage,\n            lastVisibleDoc,\n            move\n          );\n        _questions = questions;\n        _totalCount = totalCount;\n        _lastVisible = lastVisible;\n      }\n\n      setQuestionList(_questions);\n      setFilteredData(_questions);\n      setLastVisibleDoc(_lastVisible);\n      setMaxPages(Math.ceil(_totalCount / recordsPerPage));\n      setLoading(false);\n    } catch (error) {\n      console.log(error);\n      toast.error(t(\"common_error\"));\n      setLoading(false);\n    }\n    setLoading(false);\n  };\n\n  // Reload data\n  const reloadData = async () => {\n    await fetchData();\n  };\n\n  /**\n   * Handle Filter Change\n   */\n  const handleFilterChange = (e) => {\n    const { name, value } = e.target;\n    setFilters({ ...filters, [name]: value });\n  };\n\n  const handleFilterSubmit = (e) => {\n    e.preventDefault();\n    const filterItems = deleteEmptyKeys(filters);\n    const filteredAccounts = questionList.filter((account) => {\n      for (let key in filterItems) {\n        if (filterItems[key] != account[key]) return false;\n      }\n      return true;\n    });\n    setFilteredData(filteredAccounts);\n  };\n\n  const handleClearFilter = () => {\n    setFilters(filterInitialState);\n    setFilteredData(questionList);\n  };\n\n  const tableHeaderCells = [\n    t(\"topic\"),\n    t(\"date\"),\n    t(\"country\"),\n    t(\"status\"),\n    \"\",\n    \"\",\n  ];\n\n  /**\n   * Pagination related methods.\n   */\n  const handlePageChangePrevious = () => {\n    pageNumber == 1 ? 1 : setPageNumber(pageNumber - 1);\n    fetchData(\"previous\");\n  };\n  const handlePageChangeNext = () => {\n    pageNumber == maxPages ? maxPages : setPageNumber(pageNumber + 1);\n    fetchData(\"next\");\n  };\n\n  return (\n    <>\n      {loading ? (\n        <div className=\"flex justify-center bg-slate-50\"> {LoadingIndicator(\"lg\")} </div>\n      ) : (\n        <div className=\"mt-8\">\n          <Table\n            accounts={filteredData}\n            maxPages={maxPages}\n            pageNumber={pageNumber}\n            setPageNumber={setPageNumber}\n            tableHeaderCells={tableHeaderCells}\n            filters={filters}\n            filterErrors={filterErrors}\n            handleFilterChange={handleFilterChange}\n            handleFilterSubmit={handleFilterSubmit}\n            handleClearFilter={handleClearFilter}\n            handlePageChangePrevious={handlePageChangePrevious}\n            handlePageChangeNext={handlePageChangeNext}\n            showFilter={client?.clientID != null ? false : true}\n            reloadData={reloadData}\n          >\n            <TableBody questions={filteredData} />\n          </Table>\n        </div>\n      )}\n    </>\n  );\n}\n\nconst filterInitialState = {\n  status: \"\",\n};\n"],"names":["Table","React","TableBody","QuestionPool","props","t","useTranslation","client","location","state","useState","questionList","setQuestionList","maxPages","setMaxPages","pageNumber","setPageNumber","lastVisibleDoc","setLastVisibleDoc","loading","setLoading","filteredData","setFilteredData","filterInitialState","filters","setFilters","filterErrors","useEffect","fetchData","catch","err","console","log","move","clientID","questionServices","questions","totalCount","lastVisible","_questions","_totalCount","_lastVisible","status","Math","ceil","toast","reloadData","tableHeaderCells","className","LoadingIndicator","accounts","handleFilterChange","e","target","name","value","handleFilterSubmit","preventDefault","filterItems","deleteEmptyKeys","filteredAccounts","filter","account","key","handleClearFilter","handlePageChangePrevious","handlePageChangeNext","showFilter"],"sourceRoot":""}