{"version":3,"file":"static/js/680.91bcd9c2.chunk.js","mappings":"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","sources":["components/common/CustomCInputGroup.js","../node_modules/@coreui/icons/js/free/cil-reload.js","../node_modules/@coreui/icons/js/free/cil-filter.js","views/chat/components/FilterTable.js"],"sourcesContent":["import React from \"react\";\nimport {\n  CFormFeedback,\n  CFormInput,\n  CFormTextarea,\n  CFormSelect,\n  CInputGroup,\n  CButton,\n  CFormLabel,\n  CTableHeaderCell,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableRow,\n  CCol,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport { cilPlus } from \"@coreui/icons\";\nimport PhoneInputWithCountry from \"react-phone-number-input\";\n\n// Custom form input group component\nexport function CustomCFormInputGroup({\n  label,\n  name,\n  placeholder,\n  value,\n  onChange,\n  error,\n  readOnly = false,\n  mdSize = 12,\n  type = \"text\",\n  required = true,\n  multiple = true,\n  uppercase = false,\n  inputClassName = \"\",\n}) {\n  return (\n    <>\n      <CCol className=\"mb-3\" xs={12} md={mdSize}>\n        <CFormLabel\n          htmlFor={name}\n          className={uppercase ? \"uppercase\" : \"\"}\n        >{`${label}${required ? \"*\" : \"\"}`}</CFormLabel>\n        <CFormInput\n          disabled={readOnly}\n          type={type}\n          className={`!bg-white ${inputClassName}`}\n          readOnly={readOnly}\n          id={name}\n          name={name}\n          onChange={onChange}\n          // defaultValue={value}\n          value={value}\n          // required={required}\n          invalid={error ? true : false}\n          placeholder={placeholder}\n          multiple={multiple}\n        />\n        <CFormFeedback invalid>{error}</CFormFeedback>\n      </CCol>\n    </>\n  );\n}\n\n// Custom phone number input group component\nexport function CustomCFormPhoneNumberInputGroup({\n  label,\n  name,\n  placeholder,\n  value,\n  onChange,\n  error,\n  readOnly = false,\n  mdSize = 12,\n  required = true,\n  multiple = true,\n  uppercase = false,\n  inputClassName = \"\",\n}) {\n  return (\n    <>\n      <CCol className=\"mb-3\" xs={12} md={mdSize}>\n        <CFormLabel\n          htmlFor={name}\n          className={uppercase ? \"uppercase\" : \"\"}\n        >{`${label}${required ? \"*\" : \"\"}`}</CFormLabel>\n        <PhoneInputWithCountry\n          name={name}\n          value={value}\n          onChange={onChange}\n          defaultCountry=\"LK\"\n          readOnly={readOnly}\n          style={{\n            width: \"100%\",\n            borderColor: \"red\",\n            padding: \"15px\",\n            marginBottom: \"4px\",\n            height: 40,\n            borderWidth: \"1px\",\n            borderStyle: \"solid\",\n            borderColor: error ? \"red\" : \"#ced4da\",\n            backgroundColor: \"#fff\",\n          }}\n        />\n        <p  className=\"text-red-400 text-sm\">{error}</p>\n      </CCol>\n    </>\n  );\n}\n\n// Custom form input with add button group component\nexport function CustomCFormAddInputGroup({\n  label,\n  name,\n  placeholder,\n  value,\n  onChange,\n  error,\n  readOnly = false,\n  mdSize = 12,\n  type = \"text\",\n  required = true,\n  multiple = true,\n  uppercase = false,\n  inputClassName = \"\",\n  onAddInputBtnPressed,\n  addListName,\n  list,\n  addBtnLabel = \"Add\",\n  tableHeaders = [\"Name\"],\n  tableRows = [\"name\"],\n  handleChildRemoveBtnPressed,\n}) {\n  return (\n    <>\n      <CFormLabel\n        htmlFor={name}\n        className={uppercase ? \"uppercase\" : \"\"}\n      >{`${label}${required ? \"*\" : \"\"}`}</CFormLabel>\n      {!readOnly && (\n        <CCol className=\"mb-3\" xs={12} md={mdSize}>\n          <CInputGroup>\n            <CFormInput\n              type={type}\n              className={`!bg-white ${inputClassName}`}\n              readOnly={readOnly}\n              id={name}\n              name={name}\n              onChange={onChange}\n              value={value}\n              // required={required}\n              invalid={error ? true : false}\n              placeholder={placeholder}\n              multiple={multiple}\n              aria-describedby=\"button-addon2\"\n            />\n            <CButton\n              name={addListName}\n              type=\"button\"\n              color=\"secondary\"\n              variant=\"outline\"\n              id=\"button-addon2\"\n              onClick={(e) => onAddInputBtnPressed({ e, tempFieldName: name })}\n            >\n              {/* <CIcon icon={cilPlus} size=\"sm\" className=\"mx-1\"/> */}\n              {addBtnLabel}\n            </CButton>\n          </CInputGroup>\n          <CFormFeedback invalid>{error}</CFormFeedback>\n        </CCol>\n      )}\n\n      {list.length > 0 && (\n        <CTable>\n          <CTableHead>\n            <CTableRow>\n              {tableHeaders.map((header, index) => (\n                <CTableHeaderCell scope=\"col\" key={index}>\n                  {\"\"}\n                  {header}\n                </CTableHeaderCell>\n              ))}\n              <CTableHeaderCell scope=\"col\"></CTableHeaderCell>\n            </CTableRow>\n          </CTableHead>\n          <CTableBody>\n            {list.map((child, index) => (\n              <CTableRow key={index}>\n                {tableRows.map((row, index) => (\n                  <CTableDataCell scope=\"col\" key={index}>\n                    {\"\"}\n                    {child[row]}\n                  </CTableDataCell>\n                ))}\n                <CTableDataCell>\n                  {!readOnly && (\n                    <CButton\n                      color=\"danger\"\n                      variant=\"ghost\"\n                      name=\"childrenRemoveBtn\"\n                      onClick={(_) =>\n                        handleChildRemoveBtnPressed({\n                          child,\n                          listName: addListName,\n                        })\n                      }\n                    >\n                      Remove\n                    </CButton>\n                  )}\n                </CTableDataCell>\n              </CTableRow>\n            ))}\n          </CTableBody>\n        </CTable>\n      )}\n    </>\n  );\n}\n\nexport function CustomCFormTextAreaGroup({\n  label,\n  name,\n  placeholder,\n  value,\n  onChange,\n  error,\n  readOnly = false,\n  mdSize = 12,\n  type = \"text\",\n  required = true,\n  uppercase = false,\n  inputClassName = \"\",\n}) {\n  return (\n    <>\n      <CCol className=\"mb-3\" xs={12} md={mdSize}>\n        <CFormLabel\n          htmlFor={name}\n          className={uppercase ? \"uppercase\" : \"\"}\n        >{`${label}${required ? \"*\" : \"\"}`}</CFormLabel>\n        <CFormTextarea\n          type={type}\n          className={`!bg-white ${inputClassName}`}\n          readOnly={readOnly}\n          id={name}\n          name={name}\n          onChange={onChange}\n          value={value}\n          invalid={error ? true : false}\n          placeholder={placeholder}\n          rows=\"4\"\n        />\n        <CFormFeedback invalid>{error}</CFormFeedback>\n      </CCol>\n    </>\n  );\n}\n\nexport function CustomCFormFilesGroup({\n  label,\n  name,\n  placeholder,\n  onChange,\n  error,\n  readOnly = false,\n  mdSize = 12,\n  type = \"file\",\n  required = true,\n  multiple = true,\n  uppercase = false,\n  inputClassName = \"\",\n}) {\n  return (\n    <>\n      <CCol className=\"mb-3\" xs={12} md={mdSize}>\n        <CFormLabel\n          htmlFor={name}\n          className={uppercase ? \"uppercase\" : \"\"}\n        >{`${label}${required ? \"*\" : \"\"}`}</CFormLabel>\n        <CFormInput\n          type={type}\n          className={`!bg-white ${inputClassName}`}\n          readOnly={readOnly}\n          id={name}\n          name={name}\n          onChange={onChange}\n          // required={required}\n          invalid={error ? true : false}\n          placeholder={placeholder}\n          multiple={multiple}\n        />\n        <CFormFeedback invalid>{error}</CFormFeedback>\n      </CCol>\n    </>\n  );\n}\n\nexport function CustomCFormSelectGroup({\n  label,\n  name,\n  placeholder,\n  onChange,\n  error,\n  mdSize = 12,\n  required = true,\n  uppercase = false,\n  inputClassName = \"\",\n  options,\n  value,\n  defaultValue,\n}) {\n  return (\n    <>\n      <CCol className=\"mb-3\" xs={12} md={mdSize}>\n        <CFormLabel\n          htmlFor={name}\n          className={uppercase ? \"uppercase\" : \"\"}\n        >{`${label}${required ? \"*\" : \"\"}`}</CFormLabel>\n        <CFormSelect\n          className={`!bg-white ${inputClassName}`}\n          name={name}\n          defaultValue={defaultValue}\n          onChange={onChange}\n          aria-label=\"Default select example\"\n          invalid={error ? true : false}\n          value={value}\n        >\n          <option>Open this select menu</option>\n          {options.map((option, index) => (\n            <option key={index} value={option.value}>\n              {option.label}\n            </option>\n          ))}\n        </CFormSelect>\n        <CFormFeedback invalid>{error}</CFormFeedback>\n      </CCol>\n    </>\n  );\n}\n","export const cilReload = [\"512 512\",\"<path fill='var(--ci-primary-color, currentColor)' d='M265.614,206.387H456V16H424V149.887L397.863,123.75c-79.539-79.539-208.96-79.54-288.5,0s-79.539,208.96,0,288.5a204.232,204.232,0,0,0,288.5,0l-22.627-22.627c-67.063,67.063-176.182,67.063-243.244,0s-67.063-176.183,0-243.246,176.182-67.063,243.245,0l28.01,28.01H265.614Z' class='ci-primary'/>\"]","export const cilFilter = [\"512 512\",\"<path fill='var(--ci-primary-color, currentColor)' d='M238.627,496H192V253.828l-168-200V16H480V53.612l-160,200V414.627ZM224,464h1.373L288,401.373V242.388L443.51,48H60.9L224,242.172Z' class='ci-primary'/>\"]","import React, { useState } from \"react\";\nimport CIcon from \"@coreui/icons-react\";\nimport { CButton } from \"@coreui/react\";\n\nimport { cilFilter, cilReload} from \"@coreui/icons\";\n\nimport { CustomCFormSelectGroup } from \"src/components/common/CustomCInputGroup\";\nimport { t } from \"i18next\";\n\nconst FilterTable = ({\n  filters,\n  filterErrors,\n  handleFilterChange,\n  handleFilterSubmit,\n  questions,\n  handleClearFilter,\n  reloadData\n}) => {\n  const [showFilterData, setShowFilterData] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  return (\n    <>\n      <div className=\"grid grid-cols-2 justify-between mb-4 text-sm\">\n        <div className=\"grid justify-start text-sm mb-6\">\n        <CButton\n            color=\"info\"\n            variant=\"outline\"\n            onClick={reloadData}\n          >\n            <CIcon icon={cilReload} />{\" \"}\n          </CButton>\n        </div>\n        <div className=\"grid justify-end text-sm mb-6\">\n          <CButton\n            color=\"info\"\n            variant=\"outline\"\n            onClick={() => setShowFilterData(!showFilterData)}\n          >\n            <CIcon icon={cilFilter} />{\" \"}\n            <span className=\"text-sm\">{t(\"show_filters\")}</span>\n          </CButton>\n        </div>\n\n        <div className=\"row g-3 text-sm\" hidden={!showFilterData}>\n          <CustomCFormSelectGroup\n            inputClassName=\"text-sm\"\n            hidden={!questions}\n            label=\"Account Status\"\n            name=\"status\"\n            value={filters.status}\n            onChange={handleFilterChange}\n            error={filterErrors.status}\n            uppercase={true}\n            required={false}\n            mdSize={4}\n            options={[\n              { value: \"Yet to be picked\", label: \"Yet to be picked\" },\n              { value: \"Ongoing\", label: \"Ongoing\" },\n              { value: \"Assigned\", label: \"Assigned\" },\n              { value: \"Assistance\", label: \"Assistance\" },\n              { value: \"Ended\", label: \"Ended\" },\n              { value: \"Time up\", label: \"Time up\" },\n            ]}\n          />\n        </div>\n        <div className=\"flex flex-row justify-end\">\n          <div className=\"felx-row px-4 justify-end\" hidden={!showFilterData}>\n            <CButton\n              color=\"primary\"\n              variant=\"outline\"\n              onClick={handleFilterSubmit}\n            >\n              <CIcon icon={cilFilter} />{\" \"}\n              <span className=\"text-sm\">{t(\"filter\")}</span>\n            </CButton>\n          </div>\n          <div className=\"felx-row justify-end\" hidden={!showFilterData}>\n            <CButton\n              color=\"primary\"\n              variant=\"outline\"\n              onClick={handleClearFilter}\n            >\n              <CIcon icon={cilFilter} />{\" \"}\n              <span className=\"text-sm\">{t(\"clear_filter\")}</span>\n            </CButton>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default FilterTable;\n"],"names":["CustomCFormInputGroup","label","name","placeholder","value","onChange","error","readOnly","mdSize","type","required","multiple","uppercase","inputClassName","className","xs","md","htmlFor","disabled","id","invalid","CustomCFormPhoneNumberInputGroup","defaultCountry","style","width","borderColor","padding","marginBottom","height","borderWidth","borderStyle","CustomCFormSelectGroup","options","defaultValue","map","option","index","cilReload","cilFilter","filters","filterErrors","handleFilterChange","handleFilterSubmit","questions","handleClearFilter","reloadData","useState","showFilterData","setShowFilterData","color","variant","onClick","icon","t","hidden","status"],"sourceRoot":""}