{"version":3,"file":"static/js/555.deb3f374.chunk.js","mappings":"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","sources":["components/common/CustomCInputGroup.js","views/configuration/basic.js"],"sourcesContent":["import React from \"react\";\nimport {\n  CFormFeedback,\n  CFormInput,\n  CFormTextarea,\n  CFormSelect,\n  CInputGroup,\n  CButton,\n  CFormLabel,\n  CTableHeaderCell,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableRow,\n  CCol,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport { cilPlus } from \"@coreui/icons\";\nimport PhoneInputWithCountry from \"react-phone-number-input\";\n\n// Custom form input group component\nexport function CustomCFormInputGroup({\n  label,\n  name,\n  placeholder,\n  value,\n  onChange,\n  error,\n  readOnly = false,\n  mdSize = 12,\n  type = \"text\",\n  required = true,\n  multiple = true,\n  uppercase = false,\n  inputClassName = \"\",\n}) {\n  return (\n    <>\n      <CCol className=\"mb-3\" xs={12} md={mdSize}>\n        <CFormLabel\n          htmlFor={name}\n          className={uppercase ? \"uppercase\" : \"\"}\n        >{`${label}${required ? \"*\" : \"\"}`}</CFormLabel>\n        <CFormInput\n          disabled={readOnly}\n          type={type}\n          className={`!bg-white ${inputClassName}`}\n          readOnly={readOnly}\n          id={name}\n          name={name}\n          onChange={onChange}\n          // defaultValue={value}\n          value={value}\n          // required={required}\n          invalid={error ? true : false}\n          placeholder={placeholder}\n          multiple={multiple}\n        />\n        <CFormFeedback invalid>{error}</CFormFeedback>\n      </CCol>\n    </>\n  );\n}\n\n// Custom phone number input group component\nexport function CustomCFormPhoneNumberInputGroup({\n  label,\n  name,\n  placeholder,\n  value,\n  onChange,\n  error,\n  readOnly = false,\n  mdSize = 12,\n  required = true,\n  multiple = true,\n  uppercase = false,\n  inputClassName = \"\",\n}) {\n  return (\n    <>\n      <CCol className=\"mb-3\" xs={12} md={mdSize}>\n        <CFormLabel\n          htmlFor={name}\n          className={uppercase ? \"uppercase\" : \"\"}\n        >{`${label}${required ? \"*\" : \"\"}`}</CFormLabel>\n        <PhoneInputWithCountry\n          name={name}\n          value={value}\n          onChange={onChange}\n          defaultCountry=\"LK\"\n          readOnly={readOnly}\n          style={{\n            width: \"100%\",\n            borderColor: \"red\",\n            padding: \"15px\",\n            marginBottom: \"4px\",\n            height: 40,\n            borderWidth: \"1px\",\n            borderStyle: \"solid\",\n            borderColor: error ? \"red\" : \"#ced4da\",\n            backgroundColor: \"#fff\",\n          }}\n        />\n        <CFormFeedback invalid={error ? true : false}>{error}</CFormFeedback>\n      </CCol>\n    </>\n  );\n}\n\n// Custom form input with add button group component\nexport function CustomCFormAddInputGroup({\n  label,\n  name,\n  placeholder,\n  value,\n  onChange,\n  error,\n  readOnly = false,\n  mdSize = 12,\n  type = \"text\",\n  required = true,\n  multiple = true,\n  uppercase = false,\n  inputClassName = \"\",\n  onAddInputBtnPressed,\n  addListName,\n  list,\n  addBtnLabel = \"Add\",\n  tableHeaders = [\"Name\"],\n  tableRows = [\"name\"],\n  handleChildRemoveBtnPressed,\n}) {\n  return (\n    <>\n      <CFormLabel\n        htmlFor={name}\n        className={uppercase ? \"uppercase\" : \"\"}\n      >{`${label}${required ? \"*\" : \"\"}`}</CFormLabel>\n      {!readOnly && (\n        <CCol className=\"mb-3\" xs={12} md={mdSize}>\n          <CInputGroup>\n            <CFormInput\n              type={type}\n              className={`!bg-white ${inputClassName}`}\n              readOnly={readOnly}\n              id={name}\n              name={name}\n              onChange={onChange}\n              value={value}\n              // required={required}\n              invalid={error ? true : false}\n              placeholder={placeholder}\n              multiple={multiple}\n              aria-describedby=\"button-addon2\"\n            />\n            <CButton\n              name={addListName}\n              type=\"button\"\n              color=\"secondary\"\n              variant=\"outline\"\n              id=\"button-addon2\"\n              onClick={(e) => onAddInputBtnPressed({ e, tempFieldName: name })}\n            >\n              {/* <CIcon icon={cilPlus} size=\"sm\" className=\"mx-1\"/> */}\n              {addBtnLabel}\n            </CButton>\n          </CInputGroup>\n          <CFormFeedback invalid>{error}</CFormFeedback>\n        </CCol>\n      )}\n\n      {list.length > 0 && (\n        <CTable>\n          <CTableHead>\n            <CTableRow>\n              {tableHeaders.map((header, index) => (\n                <CTableHeaderCell scope=\"col\" key={index}>\n                  {\"\"}\n                  {header}\n                </CTableHeaderCell>\n              ))}\n              <CTableHeaderCell scope=\"col\"></CTableHeaderCell>\n            </CTableRow>\n          </CTableHead>\n          <CTableBody>\n            {list.map((child, index) => (\n              <CTableRow key={index}>\n                {tableRows.map((row, index) => (\n                  <CTableDataCell scope=\"col\" key={index}>\n                    {\"\"}\n                    {child[row]}\n                  </CTableDataCell>\n                ))}\n                <CTableDataCell>\n                  {!readOnly && (\n                    <CButton\n                      color=\"danger\"\n                      variant=\"ghost\"\n                      name=\"childrenRemoveBtn\"\n                      onClick={(_) =>\n                        handleChildRemoveBtnPressed({\n                          child,\n                          listName: addListName,\n                        })\n                      }\n                    >\n                      Remove\n                    </CButton>\n                  )}\n                </CTableDataCell>\n              </CTableRow>\n            ))}\n          </CTableBody>\n        </CTable>\n      )}\n    </>\n  );\n}\n\nexport function CustomCFormTextAreaGroup({\n  label,\n  name,\n  placeholder,\n  value,\n  onChange,\n  error,\n  readOnly = false,\n  mdSize = 12,\n  type = \"text\",\n  required = true,\n  uppercase = false,\n  inputClassName = \"\",\n}) {\n  return (\n    <>\n      <CCol className=\"mb-3\" xs={12} md={mdSize}>\n        <CFormLabel\n          htmlFor={name}\n          className={uppercase ? \"uppercase\" : \"\"}\n        >{`${label}${required ? \"*\" : \"\"}`}</CFormLabel>\n        <CFormTextarea\n          type={type}\n          className={`!bg-white ${inputClassName}`}\n          readOnly={readOnly}\n          id={name}\n          name={name}\n          onChange={onChange}\n          value={value}\n          invalid={error ? true : false}\n          placeholder={placeholder}\n          rows=\"4\"\n        />\n        <CFormFeedback invalid>{error}</CFormFeedback>\n      </CCol>\n    </>\n  );\n}\n\nexport function CustomCFormFilesGroup({\n  label,\n  name,\n  placeholder,\n  onChange,\n  error,\n  readOnly = false,\n  mdSize = 12,\n  type = \"file\",\n  required = true,\n  multiple = true,\n  uppercase = false,\n  inputClassName = \"\",\n}) {\n  return (\n    <>\n      <CCol className=\"mb-3\" xs={12} md={mdSize}>\n        <CFormLabel\n          htmlFor={name}\n          className={uppercase ? \"uppercase\" : \"\"}\n        >{`${label}${required ? \"*\" : \"\"}`}</CFormLabel>\n        <CFormInput\n          type={type}\n          className={`!bg-white ${inputClassName}`}\n          readOnly={readOnly}\n          id={name}\n          name={name}\n          onChange={onChange}\n          // required={required}\n          invalid={error ? true : false}\n          placeholder={placeholder}\n          multiple={multiple}\n        />\n        <CFormFeedback invalid>{error}</CFormFeedback>\n      </CCol>\n    </>\n  );\n}\n\nexport function CustomCFormSelectGroup({\n  label,\n  name,\n  placeholder,\n  onChange,\n  error,\n  mdSize = 12,\n  required = true,\n  uppercase = false,\n  inputClassName = \"\",\n  options,\n  value,\n  defaultValue,\n}) {\n  return (\n    <>\n      <CCol className=\"mb-3\" xs={12} md={mdSize}>\n        <CFormLabel\n          htmlFor={name}\n          className={uppercase ? \"uppercase\" : \"\"}\n        >{`${label}${required ? \"*\" : \"\"}`}</CFormLabel>\n        <CFormSelect\n          className={`!bg-white ${inputClassName}`}\n          name={name}\n          defaultValue={defaultValue}\n          onChange={onChange}\n          aria-label=\"Default select example\"\n          invalid={error ? true : false}\n          value={value}\n        >\n          <option>Open this select menu</option>\n          {options.map((option, index) => (\n            <option key={index} value={option.value}>\n              {option.label}\n            </option>\n          ))}\n        </CFormSelect>\n        <CFormFeedback invalid>{error}</CFormFeedback>\n      </CCol>\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport Joi from \"joi\";\nimport { CButton, CFormSwitch } from \"@coreui/react\";\nimport _ from \"lodash\";\nimport { useTranslation } from \"react-i18next\";\nimport { messaging, onMessage, getToken } from \"src/services/firebase\";\n\nimport { configServices } from \"src/services\";\n\nimport { Modal } from \"src/components\";\nimport {\n  CustomCFormInputGroup,\n  CustomCFormSelectGroup,\n  CustomCFormPhoneNumberInputGroup,\n} from \"src/components/common/CustomCInputGroup\";\n\nconst BasicConfigPage = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const { t } = useTranslation();\n\n  const [loading, setLoading] = useState(false);\n  const [formData, setFormData] = useState(initialState);\n  const [initialValues, setInitialValues] = useState(initialState);\n  const [formErrors, setFormErrors] = useState({});\n  const [updateMode, setUpdateMode] = useState(false);\n  const [modalVisible, setModalVisible] = useState(false);\n\n  // Modal related states\n  const [modalVisibility, setModalVisibility] = useState(false);\n\n  // Fetch admin data\n  useEffect(() => {\n    let isSubscribed = true;\n    const fetchAgent = async () => {\n      try {\n        setLoading(true);\n        const configs = await configServices.getAllConfigs();\n        if (configs && isSubscribed && Object.keys(configs).length > 0) {\n          setFormData(configs);\n          setInitialValues(configs);\n        } else {\n          toast.error(t(\"common_error\"));\n        }\n        setLoading(false);\n      } catch (error) {\n        console.log(error);\n        setLoading(false);\n        toast.error(t(\"common_error\"));\n      }\n    };\n    fetchAgent();\n    // Cancel any pending request\n    return () => (isSubscribed = false);\n  }, []);\n\n  // Joi schema\n  const schema = Joi.object({\n    reminderTime: Joi.number().optional().label(\"Reminder Time\"),\n  });\n\n  /*\n   * Handlers\n   */\n  const handleChange = (e) => {\n    const { name, value, files } = e.target;\n\n    delete formErrors[name];\n    setFormData({ ...formData, [name]: value });\n  };\n\n  // Handle update account button click\n  const handleSubmit = async (e) => {\n    if (!updateMode) {\n      return;\n    }\n    const updatedData = _.pick(formData, [\"reminderTime\"]);\n    setLoading(true);\n    const { error, value } = schema.validate(updatedData, {\n      abortEarly: false,\n    });\n    if (!error) {\n      try {\n        await configServices.updateConfig(updatedData);\n        setInitialValues(updatedData);\n        setFormData(updatedData);\n        toast.success(t(\"common_success\"));\n      } catch (error) {\n        console.log(error);\n        toast.error(`${t(\"common_error\")}`);\n      } finally {\n        setLoading(false);\n      }\n    } else {\n      const errors = {};\n      for (let item of error.details) {\n        errors[item.path[0]] = item.message;\n      }\n      setFormErrors({ ...formErrors, ...errors });\n      setLoading(false);\n    }\n  };\n\n  // Receive message from firebase; firebase error\n  // const receiveMessage = (e) => {\n  //   if (Notification.requestPermission == \"granted\") {\n  //     onMessageListener();\n  //   } else {\n  //     Notification.requestPermission()\n  //       .then(async () => {\n  //         onMessageListener();\n  //       })\n  //       .catch((err) => console.log(\"Notification request error: \", err));\n  //   }\n\n  //   // Foreground message listener\n  //   const onMessageListener = () => {\n  //     // Message listener\n  //     getToken(messaging, { vapidKey: process.env.REACT_APP_FCM_VAPID_KEY })\n  //       .then((currentToken) => {\n  //         if (currentToken) {\n  //           // Send the token to your server and update the UI if necessary\n  //           // ...\n  //         } else {\n  //           // Show permission request UI\n  //           console.log(\n  //             \"No registration token available. Request permission to generate one.\"\n  //           );\n  //           // ...\n  //         }\n  //       })\n  //       .catch((err) => {\n  //         console.log(\"An error occurred while retrieving token. \", err);\n  //         // ...\n  //       });\n  //   };\n  // };\n\n  return (\n    <>\n      <div className=\"shadow sm:rounded-lg bg-white p-4 mt-2 mb-5 row g-3\">\n        <div className=\"grid justify-end\">\n          <CFormSwitch\n            //   size=\"xl\"\n            label=\"Enable Update Mode\"\n            id=\"formSwitchCheckDefault\"\n            onChange={() => {\n              setUpdateMode(!updateMode);\n              setFormData(initialValues);\n            }}\n          />\n        </div>\n        <div className=\"row g-3\">\n          {CustomCFormInputGroup({\n            label: t(\"Reminder Time\"),\n            name: \"reminderTime\",\n            value: formData.reminderTime,\n            onChange: handleChange,\n            error: formErrors.reminderTime,\n            uppercase: true,\n            required: false,\n            readOnly: !updateMode,\n            mdSize: 6,\n            type: \"number\",\n          })}\n          {/* <CFormSwitch\n            //   size=\"xl\"\n            label=\"Enable Notification\"\n            id=\"formSwitchCheckDefault\"\n            onChange={() => receiveMessage()}\n          /> */}\n        </div>\n        <div className=\"flex justify-end\" hidden={!updateMode}>\n          <div className=\"justify-end\">\n            <CButton\n              color=\"primary\"\n              variant=\"outline\"\n              className=\"mr-2\"\n              onClick={handleSubmit}\n            >\n              {t(\"update\")}\n            </CButton>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default BasicConfigPage;\n\nconst initialState = {\n  reminderTime: \"\",\n};\n"],"names":["CustomCFormInputGroup","label","name","placeholder","value","onChange","error","readOnly","mdSize","type","required","multiple","uppercase","inputClassName","className","xs","md","htmlFor","disabled","id","invalid","CustomCFormPhoneNumberInputGroup","defaultCountry","style","width","borderColor","padding","marginBottom","height","borderWidth","borderStyle","CustomCFormSelectGroup","options","defaultValue","map","option","index","useDispatch","useHistory","t","useTranslation","useState","setLoading","initialState","formData","setFormData","initialValues","setInitialValues","formErrors","setFormErrors","updateMode","setUpdateMode","useEffect","isSubscribed","fetchAgent","configServices","configs","Object","keys","length","toast","console","log","schema","Joi","reminderTime","optional","handleSubmit","e","updatedData","_","validate","abortEarly","errors","details","item","path","message","target","files","hidden","color","variant","onClick"],"sourceRoot":""}