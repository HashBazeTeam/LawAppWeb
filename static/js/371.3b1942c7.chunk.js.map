{"version":3,"file":"static/js/371.3b1942c7.chunk.js","mappings":"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","sources":["components/common/CustomCInputGroup.js","utils/function.js","utils/countries.js","views/accounts/agent/AccountAddPage.js","../node_modules/file-saver/src/FileSaver.js"],"sourcesContent":["import React from \"react\";\nimport {\n  CFormFeedback,\n  CFormInput,\n  CFormTextarea,\n  CFormSelect,\n  CInputGroup,\n  CButton,\n  CFormLabel,\n  CTableHeaderCell,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableRow,\n  CCol,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport { cilPlus } from \"@coreui/icons\";\nimport PhoneInputWithCountry from \"react-phone-number-input\";\n\n// Custom form input group component\nexport function CustomCFormInputGroup({\n  label,\n  name,\n  placeholder,\n  value,\n  onChange,\n  error,\n  readOnly = false,\n  mdSize = 12,\n  type = \"text\",\n  required = true,\n  multiple = true,\n  uppercase = false,\n  inputClassName = \"\",\n}) {\n  return (\n    <>\n      <CCol className=\"mb-3\" xs={12} md={mdSize}>\n        <CFormLabel\n          htmlFor={name}\n          className={uppercase ? \"uppercase\" : \"\"}\n        >{`${label}${required ? \"*\" : \"\"}`}</CFormLabel>\n        <CFormInput\n          disabled={readOnly}\n          type={type}\n          className={`!bg-white ${inputClassName}`}\n          readOnly={readOnly}\n          id={name}\n          name={name}\n          onChange={onChange}\n          // defaultValue={value}\n          value={value}\n          // required={required}\n          invalid={error ? true : false}\n          placeholder={placeholder}\n          multiple={multiple}\n        />\n        <CFormFeedback invalid>{error}</CFormFeedback>\n      </CCol>\n    </>\n  );\n}\n\n// Custom phone number input group component\nexport function CustomCFormPhoneNumberInputGroup({\n  label,\n  name,\n  placeholder,\n  value,\n  onChange,\n  error,\n  readOnly = false,\n  mdSize = 12,\n  required = true,\n  multiple = true,\n  uppercase = false,\n  inputClassName = \"\",\n}) {\n  return (\n    <>\n      <CCol className=\"mb-3\" xs={12} md={mdSize}>\n        <CFormLabel\n          htmlFor={name}\n          className={uppercase ? \"uppercase\" : \"\"}\n        >{`${label}${required ? \"*\" : \"\"}`}</CFormLabel>\n        <PhoneInputWithCountry\n          name={name}\n          value={value}\n          onChange={onChange}\n          defaultCountry=\"LK\"\n          readOnly={readOnly}\n          style={{\n            width: \"100%\",\n            borderColor: \"red\",\n            padding: \"15px\",\n            marginBottom: \"4px\",\n            height: 40,\n            borderWidth: \"1px\",\n            borderStyle: \"solid\",\n            borderColor: error ? \"red\" : \"#ced4da\",\n            backgroundColor: \"#fff\",\n          }}\n        />\n        <CFormFeedback invalid={error ? true : false}>{error}</CFormFeedback>\n      </CCol>\n    </>\n  );\n}\n\n// Custom form input with add button group component\nexport function CustomCFormAddInputGroup({\n  label,\n  name,\n  placeholder,\n  value,\n  onChange,\n  error,\n  readOnly = false,\n  mdSize = 12,\n  type = \"text\",\n  required = true,\n  multiple = true,\n  uppercase = false,\n  inputClassName = \"\",\n  onAddInputBtnPressed,\n  addListName,\n  list,\n  addBtnLabel = \"Add\",\n  tableHeaders = [\"Name\"],\n  tableRows = [\"name\"],\n  handleChildRemoveBtnPressed,\n}) {\n  return (\n    <>\n      <CFormLabel\n        htmlFor={name}\n        className={uppercase ? \"uppercase\" : \"\"}\n      >{`${label}${required ? \"*\" : \"\"}`}</CFormLabel>\n      {!readOnly && (\n        <CCol className=\"mb-3\" xs={12} md={mdSize}>\n          <CInputGroup>\n            <CFormInput\n              type={type}\n              className={`!bg-white ${inputClassName}`}\n              readOnly={readOnly}\n              id={name}\n              name={name}\n              onChange={onChange}\n              value={value}\n              // required={required}\n              invalid={error ? true : false}\n              placeholder={placeholder}\n              multiple={multiple}\n              aria-describedby=\"button-addon2\"\n            />\n            <CButton\n              name={addListName}\n              type=\"button\"\n              color=\"secondary\"\n              variant=\"outline\"\n              id=\"button-addon2\"\n              onClick={(e) => onAddInputBtnPressed({ e, tempFieldName: name })}\n            >\n              {/* <CIcon icon={cilPlus} size=\"sm\" className=\"mx-1\"/> */}\n              {addBtnLabel}\n            </CButton>\n          </CInputGroup>\n          <CFormFeedback invalid>{error}</CFormFeedback>\n        </CCol>\n      )}\n\n      {list.length > 0 && (\n        <CTable>\n          <CTableHead>\n            <CTableRow>\n              {tableHeaders.map((header, index) => (\n                <CTableHeaderCell scope=\"col\" key={index}>\n                  {\"\"}\n                  {header}\n                </CTableHeaderCell>\n              ))}\n              <CTableHeaderCell scope=\"col\"></CTableHeaderCell>\n            </CTableRow>\n          </CTableHead>\n          <CTableBody>\n            {list.map((child, index) => (\n              <CTableRow key={index}>\n                {tableRows.map((row, index) => (\n                  <CTableDataCell scope=\"col\" key={index}>\n                    {\"\"}\n                    {child[row]}\n                  </CTableDataCell>\n                ))}\n                <CTableDataCell>\n                  {!readOnly && (\n                    <CButton\n                      color=\"danger\"\n                      variant=\"ghost\"\n                      name=\"childrenRemoveBtn\"\n                      onClick={(_) =>\n                        handleChildRemoveBtnPressed({\n                          child,\n                          listName: addListName,\n                        })\n                      }\n                    >\n                      Remove\n                    </CButton>\n                  )}\n                </CTableDataCell>\n              </CTableRow>\n            ))}\n          </CTableBody>\n        </CTable>\n      )}\n    </>\n  );\n}\n\nexport function CustomCFormTextAreaGroup({\n  label,\n  name,\n  placeholder,\n  value,\n  onChange,\n  error,\n  readOnly = false,\n  mdSize = 12,\n  type = \"text\",\n  required = true,\n  uppercase = false,\n  inputClassName = \"\",\n}) {\n  return (\n    <>\n      <CCol className=\"mb-3\" xs={12} md={mdSize}>\n        <CFormLabel\n          htmlFor={name}\n          className={uppercase ? \"uppercase\" : \"\"}\n        >{`${label}${required ? \"*\" : \"\"}`}</CFormLabel>\n        <CFormTextarea\n          type={type}\n          className={`!bg-white ${inputClassName}`}\n          readOnly={readOnly}\n          id={name}\n          name={name}\n          onChange={onChange}\n          value={value}\n          invalid={error ? true : false}\n          placeholder={placeholder}\n          rows=\"4\"\n        />\n        <CFormFeedback invalid>{error}</CFormFeedback>\n      </CCol>\n    </>\n  );\n}\n\nexport function CustomCFormFilesGroup({\n  label,\n  name,\n  placeholder,\n  onChange,\n  error,\n  readOnly = false,\n  mdSize = 12,\n  type = \"file\",\n  required = true,\n  multiple = true,\n  uppercase = false,\n  inputClassName = \"\",\n}) {\n  return (\n    <>\n      <CCol className=\"mb-3\" xs={12} md={mdSize}>\n        <CFormLabel\n          htmlFor={name}\n          className={uppercase ? \"uppercase\" : \"\"}\n        >{`${label}${required ? \"*\" : \"\"}`}</CFormLabel>\n        <CFormInput\n          type={type}\n          className={`!bg-white ${inputClassName}`}\n          readOnly={readOnly}\n          id={name}\n          name={name}\n          onChange={onChange}\n          // required={required}\n          invalid={error ? true : false}\n          placeholder={placeholder}\n          multiple={multiple}\n        />\n        <CFormFeedback invalid>{error}</CFormFeedback>\n      </CCol>\n    </>\n  );\n}\n\nexport function CustomCFormSelectGroup({\n  label,\n  name,\n  placeholder,\n  onChange,\n  error,\n  mdSize = 12,\n  required = true,\n  uppercase = false,\n  inputClassName = \"\",\n  options,\n  value,\n  defaultValue,\n}) {\n  return (\n    <>\n      <CCol className=\"mb-3\" xs={12} md={mdSize}>\n        <CFormLabel\n          htmlFor={name}\n          className={uppercase ? \"uppercase\" : \"\"}\n        >{`${label}${required ? \"*\" : \"\"}`}</CFormLabel>\n        <CFormSelect\n          className={`!bg-white ${inputClassName}`}\n          name={name}\n          defaultValue={defaultValue}\n          onChange={onChange}\n          aria-label=\"Default select example\"\n          invalid={error ? true : false}\n          value={value}\n        >\n          <option>Open this select menu</option>\n          {options.map((option, index) => (\n            <option key={index} value={option.value}>\n              {option.label}\n            </option>\n          ))}\n        </CFormSelect>\n        <CFormFeedback invalid>{error}</CFormFeedback>\n      </CCol>\n    </>\n  );\n}\n","import { saveAs } from \"file-saver\";\nimport { Timestamp , convertFirestoreTimeStampToDate} from \"src/services/firebase\";\n\n// Get image from bucket given the image identifier\nexport function getImageFromBucket(imageName) {\n  //   return `https://s3.ap-south-1.amazonaws.com/up-to-now-images/${imageName}.${imageType}`;\n  return imageName;\n}\n\n/**\n * Add given data object to FormData type object\n * @param {*} formData : FormData\n * @param {*} data : {key: value}\n * @returns FormData object\n */\nexport function addDataToFormData(data, formData = new FormData()) {\n  for (let key in data) {\n    if (key === \"images\" || key === \"image\") {\n      for (let i = 0; i < data[key].length; i++) {\n        formData.append(key, data[key][i]);\n      }\n      continue;\n    }\n    formData.set(key, data[key]);\n  }\n  return formData;\n}\n\n/**\n * Print FormData object to console\n * @param {*} formData\n * @param {*} data\n */\nexport function printFormData(formData, data) {\n  for (let key in data) {\n    console.log(key, formData.get(key));\n  }\n}\n\n/**\n * Save given image to the local\n * @param {*} urlArr : URL String Array\n */\nexport async function saveImg(urlArr, fileName) {\n  (async () => {\n    if (!Array.isArray(urlArr)) {\n      const xhr = new XMLHttpRequest();\n      xhr.responseType = 'blob';\n      xhr.onload = (event) => {\n        const blob = xhr.response;\n        saveAs(blob, fileName);\n      };\n      xhr.open('GET', urlArr);\n      xhr.send();\n      // const response = await fetch(urlArr);\n      // const blob = await response.blob();\n      // saveAs(blob);\n      return;\n    }\n    for (let i = 0; i < urlArr.length; i++) {\n      const response = await fetch(urlArr[i]);\n      const blob = await response.blob();\n      saveAs(blob);\n    }\n  })();\n}\n\n/**\n * Delete all the empty keys from the given object\n * @param {*} obj : {key: value}\n * @returns\n */\nexport function deleteEmptyKeys(obj) {\n  for (let key in obj) {\n    if (obj[key] === \"\") {\n      delete obj[key];\n    } else if (obj[key] === \"Open this select menu\") {\n      delete obj[key];\n    }\n  }\n  return obj;\n}\n\n/**\n * Convert given Date object to Sri Lanka date format string (dd/mm/yyyy)\n * @param {*} date\n * @returns\n */\nexport function convertTZ(paramDate) {\n  if (!paramDate) return \"\";\n\n  let date = paramDate;\n  if (paramDate instanceof Timestamp) {\n    date = convertFirestoreTimeStampToDate(paramDate);\n  }\n\n  let dateObj = new Date(date);\n\n  // MM-DD-YYYY format\n  let dateStr = dateObj.toLocaleDateString(\"ko-KR\", {\n    timeZone: \"Asia/Colombo\",\n  });\n  // Convert ot YYYY-MM-DD format\n  let dateArr = dateStr.split(\".\");\n  let year = dateArr[0].trim();\n  let month = dateArr[1].trim();\n  let day = dateArr[2].trim();\n\n  year.length === 2 ? (year = \"00\" + year) : year;\n  year.length === 3 ? (year = \"0\" + year) : year;\n  month.length === 1 ? (month = \"0\" + month) : month;\n  day.length === 1 ? (day = \"0\" + day) : day;\n\n  const final = `${year}-${month}-${day}`;\n  return final;\n}\n\n/**\n * Add empty strings to the given object keys if it is not present, null or undefined\n * @param {{key: value}} obj\n * @param {[key1, key2, key3]} keys\n * @returns {{key: value}} obj\n */\nexport function addEmptyStrings(obj, keys = null) {\n  if (keys) {\n    for (let i = 0; i < keys.length; i++) {\n      if (!obj[keys[i]]) {\n        obj[keys[i]] = \"\";\n      } else if (obj[keys[i]] === null) {\n        obj[keys[i]] = \"\";\n      } else if (obj[keys[i]] === undefined) {\n        obj[keys[i]] = \"\";\n      } else if (obj[keys[i]] === \"Open this select menu\") {\n        obj[keys[i]] = \"\";\n      }\n    }\n  } else {\n    for (let key in obj) {\n      if (obj[key] === null) {\n        obj[key] = \"\";\n      } else if (obj[key] === undefined) {\n        obj[key] = \"\";\n      } else if (obj[key] === \"Open this select menu\") {\n        obj[key] = \"\";\n      }\n    }\n  }\n  return obj;\n}\n\nexport function getUpdatedDataOnly(original, updated) {\n  let updatedData = {};\n  for (let key in original) {\n    if (original[key] != updated[key]) {\n      updatedData[key] = updated[key];\n    }\n  }\n  return updatedData;\n}\n","import countries from \"i18n-iso-countries\";\n\n// Register the language\ncountries.registerLocale(require(\"i18n-iso-countries/langs/en.json\"));\n\nconst countriesObject = countries.getNames(\"en\", { select: \"official\" });\n\nconst countryArray = Object.entries(countriesObject).map(([key, value]) => {\n  return {\n    value: value,\n    label: value,\n  };\n});\n\nexport default countryArray;\n","import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { toast } from \"react-toastify\";\nimport Joi from \"joi\";\nimport { useTranslation } from \"react-i18next\";\nimport { isPossiblePhoneNumber } from \"react-phone-number-input\";\n\nimport { countryArray } from \"src/utils\";\nimport {\n  CustomCFormInputGroup,\n  CustomCFormSelectGroup,\n  CustomCFormPhoneNumberInputGroup,\n} from \"src/components/common/CustomCInputGroup\";\nimport { userServices } from \"src/services\";\n\nimport { CButton } from \"@coreui/react\";\n\n/**\n * Agent account add page\n * TODO: Change according to law app requirements\n */\nconst AgentAddPage = () => {\n  const { t } = useTranslation();\n\n  const [formData, setFormData] = useState(initialValue);\n  const [formErrors, setFormErrors] = useState({});\n  const [countryOptions, setCountryOptions] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setCountryOptions(countryArray);\n  }, []);\n\n  // Joi schema\n  const schema = Joi.object({\n    fullName: Joi.string().required().label(\"Full name\"),\n    country: Joi.string().required().label(\"Country\"),\n    email: Joi.string()\n      .email({ tlds: { allow: false } })\n      .required()\n      .label(\"Email\"),\n    phoneNumber: Joi.string().required().label(\"Phone Number\"),\n  });\n\n  /*\n   * Form related functions\n   */\n\n  // Handle input change\n  const handleChange = (e) => {\n    const { name, value, files } = e.target;\n    if (name === \"images\") {\n      setFormData({ ...formData, [name]: files });\n    } else {\n      delete formErrors[name];\n      setFormData({ ...formData, [name]: value });\n    }\n  };\n\n  const handlePhoneChange = (value) => {\n    delete formErrors[\"phoneNumber\"];\n    setFormData({ ...formData, phoneNumber: value });\n  };\n\n  // Handle add agent form submit\n  const handleSubmit = async (e) => {\n    setLoading(true);\n    const { error, value } = schema.validate(formData, { abortEarly: false });\n    let phoneError = false;\n    if (!isPossiblePhoneNumber(formData.phoneNumber)) {\n      setLoading(false);\n      setFormErrors({ ...formErrors, phoneNumber: \"Invalid phone number\" });\n      phoneError = true;\n    }\n    if (!error && !phoneError) {\n      try {\n        await userServices.addAgent(value);\n        toast.success(t(\"common_success\"));\n        setFormData(initialValue);\n      } catch (error) {\n        toast.error(\"Something went wrong. Please try again later.\");\n      } finally {\n        setLoading(false);\n      }\n    } else {\n      const errors = {};\n      for (let item of error.details) {\n        errors[item.path[0]] = item.message;\n      }\n      setFormErrors({ ...formErrors, ...errors });\n      setLoading(false);\n    }\n  };\n  return (\n    <>\n      <div className=\"shadow sm:rounded-lg bg-white p-4 mb-5 row g-3\">\n        <div className=\"row g-3\">\n          <CustomCFormInputGroup\n            label={t(\"full_name\")}\n            name=\"fullName\"\n            value={formData.fullName}\n            onChange={handleChange}\n            error={formErrors.fullName}\n            uppercase={true}\n          />\n          <CustomCFormInputGroup\n            label={t(\"email_address\")}\n            name=\"email\"\n            value={formData.email}\n            onChange={handleChange}\n            error={formErrors.email}\n            uppercase={true}\n            mdSize={6}\n          />\n          <CustomCFormSelectGroup\n            label={t(\"country\")}\n            name=\"country\"\n            value={formData.country}\n            onChange={handleChange}\n            error={formErrors.country}\n            uppercase={true}\n            mdSize={6}\n            options={countryOptions}\n          />\n          <CustomCFormPhoneNumberInputGroup\n            label={t(\"phone_number\")}\n            name=\"phoneNumber\"\n            value={formData.phoneNumber}\n            onChange={handlePhoneChange}\n            error={formErrors.phoneNumber}\n            uppercase={true}\n            mdSize={6}\n          />\n        </div>\n        <div className=\"grid justify-end\">\n          <CButton\n            color=\"primary\"\n            variant=\"outline\"\n            className=\"mr-2\"\n            onClick={handleSubmit}\n            disabled={loading}\n          >\n            {\" \"}\n            Submit{\" \"}\n          </CButton>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default AgentAddPage;\n\nconst initialValue = {\n  fullName: \"\",\n  email: \"\",\n  phoneNumber: \"\",\n  country: \"\",\n};\n","/*\n* FileSaver.js\n* A saveAs() FileSaver implementation.\n*\n* By Eli Grey, http://eligrey.com\n*\n* License : https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md (MIT)\n* source  : http://purl.eligrey.com/github/FileSaver.js\n*/\n\n// The one and only way of getting global scope in all environments\n// https://stackoverflow.com/q/3277182/1008999\nvar _global = typeof window === 'object' && window.window === window\n  ? window : typeof self === 'object' && self.self === self\n  ? self : typeof global === 'object' && global.global === global\n  ? global\n  : this\n\nfunction bom (blob, opts) {\n  if (typeof opts === 'undefined') opts = { autoBom: false }\n  else if (typeof opts !== 'object') {\n    console.warn('Deprecated: Expected third argument to be a object')\n    opts = { autoBom: !opts }\n  }\n\n  // prepend BOM for UTF-8 XML and text/* types (including HTML)\n  // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF\n  if (opts.autoBom && /^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(blob.type)) {\n    return new Blob([String.fromCharCode(0xFEFF), blob], { type: blob.type })\n  }\n  return blob\n}\n\nfunction download (url, name, opts) {\n  var xhr = new XMLHttpRequest()\n  xhr.open('GET', url)\n  xhr.responseType = 'blob'\n  xhr.onload = function () {\n    saveAs(xhr.response, name, opts)\n  }\n  xhr.onerror = function () {\n    console.error('could not download file')\n  }\n  xhr.send()\n}\n\nfunction corsEnabled (url) {\n  var xhr = new XMLHttpRequest()\n  // use sync to avoid popup blocker\n  xhr.open('HEAD', url, false)\n  try {\n    xhr.send()\n  } catch (e) {}\n  return xhr.status >= 200 && xhr.status <= 299\n}\n\n// `a.click()` doesn't work for all browsers (#465)\nfunction click (node) {\n  try {\n    node.dispatchEvent(new MouseEvent('click'))\n  } catch (e) {\n    var evt = document.createEvent('MouseEvents')\n    evt.initMouseEvent('click', true, true, window, 0, 0, 0, 80,\n                          20, false, false, false, false, 0, null)\n    node.dispatchEvent(evt)\n  }\n}\n\n// Detect WebView inside a native macOS app by ruling out all browsers\n// We just need to check for 'Safari' because all other browsers (besides Firefox) include that too\n// https://www.whatismybrowser.com/guides/the-latest-user-agent/macos\nvar isMacOSWebView = _global.navigator && /Macintosh/.test(navigator.userAgent) && /AppleWebKit/.test(navigator.userAgent) && !/Safari/.test(navigator.userAgent)\n\nvar saveAs = _global.saveAs || (\n  // probably in some web worker\n  (typeof window !== 'object' || window !== _global)\n    ? function saveAs () { /* noop */ }\n\n  // Use download attribute first if possible (#193 Lumia mobile) unless this is a macOS WebView\n  : ('download' in HTMLAnchorElement.prototype && !isMacOSWebView)\n  ? function saveAs (blob, name, opts) {\n    var URL = _global.URL || _global.webkitURL\n    var a = document.createElement('a')\n    name = name || blob.name || 'download'\n\n    a.download = name\n    a.rel = 'noopener' // tabnabbing\n\n    // TODO: detect chrome extensions & packaged apps\n    // a.target = '_blank'\n\n    if (typeof blob === 'string') {\n      // Support regular links\n      a.href = blob\n      if (a.origin !== location.origin) {\n        corsEnabled(a.href)\n          ? download(blob, name, opts)\n          : click(a, a.target = '_blank')\n      } else {\n        click(a)\n      }\n    } else {\n      // Support blobs\n      a.href = URL.createObjectURL(blob)\n      setTimeout(function () { URL.revokeObjectURL(a.href) }, 4E4) // 40s\n      setTimeout(function () { click(a) }, 0)\n    }\n  }\n\n  // Use msSaveOrOpenBlob as a second approach\n  : 'msSaveOrOpenBlob' in navigator\n  ? function saveAs (blob, name, opts) {\n    name = name || blob.name || 'download'\n\n    if (typeof blob === 'string') {\n      if (corsEnabled(blob)) {\n        download(blob, name, opts)\n      } else {\n        var a = document.createElement('a')\n        a.href = blob\n        a.target = '_blank'\n        setTimeout(function () { click(a) })\n      }\n    } else {\n      navigator.msSaveOrOpenBlob(bom(blob, opts), name)\n    }\n  }\n\n  // Fallback to using FileReader and a popup\n  : function saveAs (blob, name, opts, popup) {\n    // Open a popup immediately do go around popup blocker\n    // Mostly only available on user interaction and the fileReader is async so...\n    popup = popup || open('', '_blank')\n    if (popup) {\n      popup.document.title =\n      popup.document.body.innerText = 'downloading...'\n    }\n\n    if (typeof blob === 'string') return download(blob, name, opts)\n\n    var force = blob.type === 'application/octet-stream'\n    var isSafari = /constructor/i.test(_global.HTMLElement) || _global.safari\n    var isChromeIOS = /CriOS\\/[\\d]+/.test(navigator.userAgent)\n\n    if ((isChromeIOS || (force && isSafari) || isMacOSWebView) && typeof FileReader !== 'undefined') {\n      // Safari doesn't allow downloading of blob URLs\n      var reader = new FileReader()\n      reader.onloadend = function () {\n        var url = reader.result\n        url = isChromeIOS ? url : url.replace(/^data:[^;]*;/, 'data:attachment/file;')\n        if (popup) popup.location.href = url\n        else location = url\n        popup = null // reverse-tabnabbing #460\n      }\n      reader.readAsDataURL(blob)\n    } else {\n      var URL = _global.URL || _global.webkitURL\n      var url = URL.createObjectURL(blob)\n      if (popup) popup.location = url\n      else location.href = url\n      popup = null // reverse-tabnabbing #460\n      setTimeout(function () { URL.revokeObjectURL(url) }, 4E4) // 40s\n    }\n  }\n)\n\n_global.saveAs = saveAs.saveAs = saveAs\n\nif (typeof module !== 'undefined') {\n  module.exports = saveAs;\n}\n"],"names":["CustomCFormInputGroup","label","name","placeholder","value","onChange","error","readOnly","mdSize","type","required","multiple","uppercase","inputClassName","className","xs","md","htmlFor","disabled","id","invalid","CustomCFormPhoneNumberInputGroup","defaultCountry","style","width","borderColor","padding","marginBottom","height","borderWidth","borderStyle","CustomCFormSelectGroup","options","defaultValue","map","option","index","saveImg","urlArr","fileName","Array","isArray","xhr","XMLHttpRequest","responseType","onload","event","blob","response","saveAs","open","send","i","length","fetch","deleteEmptyKeys","obj","key","convertTZ","paramDate","date","Timestamp","convertFirestoreTimeStampToDate","dateArr","Date","toLocaleDateString","timeZone","split","year","trim","month","day","countries","require","countriesObject","select","Object","entries","t","useTranslation","useState","initialValue","formData","setFormData","formErrors","setFormErrors","countryOptions","setCountryOptions","loading","setLoading","useEffect","countryArray","schema","Joi","fullName","country","email","tlds","allow","phoneNumber","handleChange","e","target","files","handleSubmit","validate","abortEarly","phoneError","isPossiblePhoneNumber","userServices","toast","errors","details","item","path","message","color","variant","onClick","b","a","autoBom","console","warn","test","Blob","c","d","g","onerror","status","dispatchEvent","MouseEvent","document","createEvent","initMouseEvent","window","f","self","global","navigator","userAgent","HTMLAnchorElement","prototype","h","URL","webkitURL","j","createElement","download","rel","href","origin","location","createObjectURL","setTimeout","revokeObjectURL","msSaveOrOpenBlob","title","body","innerText","HTMLElement","safari","FileReader","k","onloadend","result","replace","readAsDataURL","l","m","module","exports"],"sourceRoot":""}