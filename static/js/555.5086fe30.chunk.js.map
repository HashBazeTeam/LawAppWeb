{"version":3,"file":"static/js/555.5086fe30.chunk.js","mappings":"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","sources":["components/common/CustomCInputGroup.js","views/configuration/basic.js"],"sourcesContent":["import React from \"react\";\nimport {\n  CFormFeedback,\n  CFormInput,\n  CFormTextarea,\n  CFormSelect,\n  CInputGroup,\n  CButton,\n  CFormLabel,\n  CTableHeaderCell,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableRow,\n  CCol,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport { cilPlus } from \"@coreui/icons\";\nimport PhoneInputWithCountry from \"react-phone-number-input\";\n\n// Custom form input group component\nexport function CustomCFormInputGroup({\n  label,\n  name,\n  placeholder,\n  value,\n  onChange,\n  error,\n  readOnly = false,\n  mdSize = 12,\n  type = \"text\",\n  required = true,\n  multiple = true,\n  uppercase = false,\n  inputClassName = \"\",\n}) {\n  return (\n    <>\n      <CCol className=\"mb-3\" xs={12} md={mdSize}>\n        <CFormLabel\n          htmlFor={name}\n          className={uppercase ? \"uppercase\" : \"\"}\n        >{`${label}${required ? \"*\" : \"\"}`}</CFormLabel>\n        <CFormInput\n          disabled={readOnly}\n          type={type}\n          className={`!bg-white ${inputClassName}`}\n          readOnly={readOnly}\n          id={name}\n          name={name}\n          onChange={onChange}\n          // defaultValue={value}\n          value={value}\n          // required={required}\n          invalid={error ? true : false}\n          placeholder={placeholder}\n          multiple={multiple}\n        />\n        <CFormFeedback invalid>{error}</CFormFeedback>\n      </CCol>\n    </>\n  );\n}\n\n// Custom phone number input group component\nexport function CustomCFormPhoneNumberInputGroup({\n  label,\n  name,\n  placeholder,\n  value,\n  onChange,\n  error,\n  readOnly = false,\n  mdSize = 12,\n  required = true,\n  multiple = true,\n  uppercase = false,\n  inputClassName = \"\",\n}) {\n  return (\n    <>\n      <CCol className=\"mb-3\" xs={12} md={mdSize}>\n        <CFormLabel\n          htmlFor={name}\n          className={uppercase ? \"uppercase\" : \"\"}\n        >{`${label}${required ? \"*\" : \"\"}`}</CFormLabel>\n        <PhoneInputWithCountry\n          name={name}\n          value={value}\n          onChange={onChange}\n          defaultCountry=\"LK\"\n          readOnly={readOnly}\n          style={{\n            width: \"100%\",\n            borderColor: \"red\",\n            padding: \"15px\",\n            marginBottom: \"4px\",\n            height: 40,\n            borderWidth: \"1px\",\n            borderStyle: \"solid\",\n            borderColor: error ? \"red\" : \"#ced4da\",\n            backgroundColor: \"#fff\",\n          }}\n        />\n        <p  className=\"text-red-400 text-sm\">{error}</p>\n      </CCol>\n    </>\n  );\n}\n\n// Custom form input with add button group component\nexport function CustomCFormAddInputGroup({\n  label,\n  name,\n  placeholder,\n  value,\n  onChange,\n  error,\n  readOnly = false,\n  mdSize = 12,\n  type = \"text\",\n  required = true,\n  multiple = true,\n  uppercase = false,\n  inputClassName = \"\",\n  onAddInputBtnPressed,\n  addListName,\n  list,\n  addBtnLabel = \"Add\",\n  tableHeaders = [\"Name\"],\n  tableRows = [\"name\"],\n  handleChildRemoveBtnPressed,\n}) {\n  return (\n    <>\n      <CFormLabel\n        htmlFor={name}\n        className={uppercase ? \"uppercase\" : \"\"}\n      >{`${label}${required ? \"*\" : \"\"}`}</CFormLabel>\n      {!readOnly && (\n        <CCol className=\"mb-3\" xs={12} md={mdSize}>\n          <CInputGroup>\n            <CFormInput\n              type={type}\n              className={`!bg-white ${inputClassName}`}\n              readOnly={readOnly}\n              id={name}\n              name={name}\n              onChange={onChange}\n              value={value}\n              // required={required}\n              invalid={error ? true : false}\n              placeholder={placeholder}\n              multiple={multiple}\n              aria-describedby=\"button-addon2\"\n            />\n            <CButton\n              name={addListName}\n              type=\"button\"\n              color=\"secondary\"\n              variant=\"outline\"\n              id=\"button-addon2\"\n              onClick={(e) => onAddInputBtnPressed({ e, tempFieldName: name })}\n            >\n              {/* <CIcon icon={cilPlus} size=\"sm\" className=\"mx-1\"/> */}\n              {addBtnLabel}\n            </CButton>\n          </CInputGroup>\n          <CFormFeedback invalid>{error}</CFormFeedback>\n        </CCol>\n      )}\n\n      {list.length > 0 && (\n        <CTable>\n          <CTableHead>\n            <CTableRow>\n              {tableHeaders.map((header, index) => (\n                <CTableHeaderCell scope=\"col\" key={index}>\n                  {\"\"}\n                  {header}\n                </CTableHeaderCell>\n              ))}\n              <CTableHeaderCell scope=\"col\"></CTableHeaderCell>\n            </CTableRow>\n          </CTableHead>\n          <CTableBody>\n            {list.map((child, index) => (\n              <CTableRow key={index}>\n                {tableRows.map((row, index) => (\n                  <CTableDataCell scope=\"col\" key={index}>\n                    {\"\"}\n                    {child[row]}\n                  </CTableDataCell>\n                ))}\n                <CTableDataCell>\n                  {!readOnly && (\n                    <CButton\n                      color=\"danger\"\n                      variant=\"ghost\"\n                      name=\"childrenRemoveBtn\"\n                      onClick={(_) =>\n                        handleChildRemoveBtnPressed({\n                          child,\n                          listName: addListName,\n                        })\n                      }\n                    >\n                      Remove\n                    </CButton>\n                  )}\n                </CTableDataCell>\n              </CTableRow>\n            ))}\n          </CTableBody>\n        </CTable>\n      )}\n    </>\n  );\n}\n\nexport function CustomCFormTextAreaGroup({\n  label,\n  name,\n  placeholder,\n  value,\n  onChange,\n  error,\n  readOnly = false,\n  mdSize = 12,\n  type = \"text\",\n  required = true,\n  uppercase = false,\n  inputClassName = \"\",\n}) {\n  return (\n    <>\n      <CCol className=\"mb-3\" xs={12} md={mdSize}>\n        <CFormLabel\n          htmlFor={name}\n          className={uppercase ? \"uppercase\" : \"\"}\n        >{`${label}${required ? \"*\" : \"\"}`}</CFormLabel>\n        <CFormTextarea\n          type={type}\n          className={`!bg-white ${inputClassName}`}\n          readOnly={readOnly}\n          id={name}\n          name={name}\n          onChange={onChange}\n          value={value}\n          invalid={error ? true : false}\n          placeholder={placeholder}\n          rows=\"4\"\n        />\n        <CFormFeedback invalid>{error}</CFormFeedback>\n      </CCol>\n    </>\n  );\n}\n\nexport function CustomCFormFilesGroup({\n  label,\n  name,\n  placeholder,\n  onChange,\n  error,\n  readOnly = false,\n  mdSize = 12,\n  type = \"file\",\n  required = true,\n  multiple = true,\n  uppercase = false,\n  inputClassName = \"\",\n}) {\n  return (\n    <>\n      <CCol className=\"mb-3\" xs={12} md={mdSize}>\n        <CFormLabel\n          htmlFor={name}\n          className={uppercase ? \"uppercase\" : \"\"}\n        >{`${label}${required ? \"*\" : \"\"}`}</CFormLabel>\n        <CFormInput\n          type={type}\n          className={`!bg-white ${inputClassName}`}\n          readOnly={readOnly}\n          id={name}\n          name={name}\n          onChange={onChange}\n          // required={required}\n          invalid={error ? true : false}\n          placeholder={placeholder}\n          multiple={multiple}\n        />\n        <CFormFeedback invalid>{error}</CFormFeedback>\n      </CCol>\n    </>\n  );\n}\n\nexport function CustomCFormSelectGroup({\n  label,\n  name,\n  placeholder,\n  onChange,\n  error,\n  mdSize = 12,\n  required = true,\n  uppercase = false,\n  inputClassName = \"\",\n  options,\n  value,\n  defaultValue,\n  readOnly\n}) {\n  return (\n    <>\n      <CCol className=\"mb-3\" xs={12} md={mdSize}>\n        <CFormLabel\n          htmlFor={name}\n          className={uppercase ? \"uppercase\" : \"\"}\n        >{`${label}${required ? \"*\" : \"\"}`}</CFormLabel>\n        <CFormSelect\n          className={`!bg-white ${inputClassName}`}\n          name={name}\n          defaultValue={defaultValue}\n          onChange={onChange}\n          aria-label=\"Default select example\"\n          invalid={error ? true : false}\n          value={value}\n          disabled={readOnly}\n        >\n          <option>Open this select menu</option>\n          {options.map((option, index) => (\n            <option key={index} value={option.value}>\n              {option.label}\n            </option>\n          ))}\n        </CFormSelect>\n        <CFormFeedback invalid>{error}</CFormFeedback>\n      </CCol>\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { toast } from \"react-toastify\";\nimport Joi from \"joi\";\nimport { CButton, CFormSwitch } from \"@coreui/react\";\nimport _ from \"lodash\";\nimport { useTranslation } from \"react-i18next\";\nimport Cookies from \"js-cookie\";\nimport i18next from \"src/i18n\";\n\nimport { configServices } from \"src/services\";\n\nimport { LoadingIndicator } from \"src/components\";\nimport {\n  CustomCFormInputGroup,\n  CustomCFormSelectGroup,\n} from \"src/components/common/CustomCInputGroup\";\n\nconst BasicConfigPage = () => {\n  const { t } = useTranslation();\n  const currentLanguage = i18next.language;\n\n  console.log(\"currentLanguage\", currentLanguage);\n  const [language, setLanguage] = useState(currentLanguage || \"en\");\n  const [newLanguage, setNewLanguage] = useState(currentLanguage || \"en\");\n  const [loading, setLoading] = useState(false);\n  const [formData, setFormData] = useState(initialState);\n  const [initialValues, setInitialValues] = useState(initialState);\n  const [formErrors, setFormErrors] = useState({});\n  const [updateMode, setUpdateMode] = useState(false);\n\n  // Fetch admin data\n  useEffect(() => {\n    let isSubscribed = true;\n    const fetchAgent = async () => {\n      try {\n        setLoading(true);\n        const configs = await configServices.getAllConfigs();\n        if (configs && isSubscribed && Object.keys(configs).length > 0) {\n          setFormData(configs);\n          setInitialValues(configs);\n        } else {\n          toast.error(t(\"common_error\"));\n        }\n        setLoading(false);\n      } catch (error) {\n        console.log(error);\n        setLoading(false);\n        toast.error(t(\"common_error\"));\n      }\n    };\n    fetchAgent();\n    // Cancel any pending request\n    return () => (isSubscribed = false);\n  }, []);\n\n  // Joi schema\n  const schema = Joi.object({\n    reminderTime: Joi.number().optional().label(\"Reminder Time\"),\n  });\n\n  /*\n   * Handlers\n   */\n  const handleChange = (e) => {\n    const { name, value, files } = e.target;\n\n    delete formErrors[name];\n    setFormData({ ...formData, [name]: value });\n  };\n\n  // Handle update account button click\n  const handleSubmit = async (e) => {\n    if (!updateMode) {\n      return;\n    }\n    // Check if reminder time is equal in initial value and form data\n    if (formData.reminderTime != initialValues.reminderTime) {\n      const updatedData = _.pick(formData, [\"reminderTime\"]);\n      setLoading(true);\n      const { error, value } = schema.validate(updatedData, {\n        abortEarly: false,\n      });\n      if (!error) {\n        try {\n          await configServices.updateConfig(updatedData);\n          setInitialValues(updatedData);\n          setFormData(updatedData);\n          toast.success(t(\"common_success\"));\n        } catch (error) {\n          console.log(error);\n          toast.error(`${t(\"common_error\")}`);\n        } finally {\n          setLoading(false);\n        }\n      } else {\n        const errors = {};\n        for (let item of error.details) {\n          errors[item.path[0]] = item.message;\n        }\n        setFormErrors({ ...formErrors, ...errors });\n        setLoading(false);\n      }\n    }\n\n    // Check if language is equal in initial value and form data\n    if (language != newLanguage) {\n      setLoading(true);\n      try {\n        setLanguage(newLanguage);\n        i18next.changeLanguage(newLanguage);\n        Cookies.set(\"LawWebcurrentLocale\", newLanguage);\n        setLoading(false);\n        toast.success(t(\"common_success\"));\n        window.location.reload();\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n\n  // Language options\n  const languageOptions = [\n    { value: \"si\", label: \"Sinhala\" },\n    { value: \"en\", label: \"English\" },\n  ];\n\n  // Handle language change\n  const handleLanguageChange = (e) => {\n    const { value } = e.target;\n    setNewLanguage(value);\n  };\n\n  return (\n    <>\n      <div className=\"shadow sm:rounded-lg bg-white p-4 mt-2 mb-5 row g-3\">\n        <div className=\"grid justify-end\">\n          <CFormSwitch\n            //   size=\"xl\"\n            label=\"Enable Update Mode\"\n            id=\"formSwitchCheckDefault\"\n            onChange={() => {\n              setUpdateMode(!updateMode);\n              setFormData(initialValues);\n            }}\n          />\n        </div>\n        {loading ? (\n          LoadingIndicator(\"xl\")\n        ) : (\n          <div>\n            <div className=\"row g-3\">\n              {CustomCFormInputGroup({\n                label: t(\"reminder_time\"),\n                name: \"reminderTime\",\n                value: formData.reminderTime,\n                onChange: handleChange,\n                error: formErrors.reminderTime,\n                uppercase: true,\n                required: false,\n                readOnly: !updateMode,\n                mdSize: 4,\n                type: \"number\",\n              })}\n            </div>\n            <div className=\"row g-3\">\n              <CustomCFormSelectGroup\n                label={t(\"language\")}\n                name=\"language\"\n                value={newLanguage}\n                onChange={handleLanguageChange}\n                uppercase={true}\n                mdSize={4}\n                options={languageOptions}\n                readOnly={!updateMode}\n                required={false}\n              />\n            </div>\n          </div>\n        )}\n\n        <div className=\"flex justify-end\" hidden={!updateMode}>\n          <div className=\"justify-end\">\n            <CButton\n              color=\"primary\"\n              variant=\"outline\"\n              className=\"mr-2\"\n              onClick={handleSubmit}\n              disabled={loading}\n            >\n              {t(\"update\")}\n            </CButton>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default BasicConfigPage;\n\nconst initialState = {\n  reminderTime: \"\",\n};\n"],"names":["CustomCFormInputGroup","label","name","placeholder","value","onChange","error","readOnly","mdSize","type","required","multiple","uppercase","inputClassName","className","xs","md","htmlFor","disabled","id","invalid","CustomCFormPhoneNumberInputGroup","defaultCountry","style","width","borderColor","padding","marginBottom","height","borderWidth","borderStyle","CustomCFormSelectGroup","options","defaultValue","map","option","index","t","useTranslation","currentLanguage","i18next","console","log","useState","language","setLanguage","newLanguage","setNewLanguage","loading","setLoading","initialState","formData","setFormData","initialValues","setInitialValues","formErrors","setFormErrors","updateMode","setUpdateMode","useEffect","isSubscribed","fetchAgent","configServices","configs","Object","keys","length","toast","schema","Joi","reminderTime","optional","handleSubmit","e","updatedData","_","validate","abortEarly","errors","details","item","path","message","Cookies","window","location","reload","LoadingIndicator","target","files","hidden","color","variant","onClick"],"sourceRoot":""}