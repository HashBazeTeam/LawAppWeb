{"version":3,"file":"static/js/788.039d7a3d.chunk.js","mappings":"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","sources":["views/chat/Chat.js","../node_modules/typescript/lib|sync"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport Joi from \"joi\";\nimport { LinkIcon } from \"@heroicons/react/solid\";\nimport { toast } from \"react-toastify\";\nimport { useTranslation } from \"react-i18next\";\nimport { MessageList, Input, Button, MessageBox } from \"react-chat-elements\";\nimport { SystemMessage } from \"react-chat-elements\";\nimport CIcon from \"@coreui/icons-react\";\nimport { CButton } from \"@coreui/react\";\nimport { cilSearch } from \"@coreui/icons\";\n\n// Custom imports\nimport { LoadingIndicator } from \"src/components\";\nimport { saveImg } from \"src/utils/function\";\nimport {\n  collection,\n  query,\n  where,\n  onSnapshot,\n  firestore,\n} from \"src/services/firebase\";\nimport { selectors } from \"src/store\";\nimport { questionServices } from \"src/services\";\nimport { textSpanContainsTextSpan } from \"typescript\";\n\n/**\n * Single Chat User Interface\n */\nexport default function Chat(props) {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n  const screenHeight = window.innerHeight - 128; // Due to purge issue tailwind css doesn't detect variable changes.\n  const question = props.location.state.question; // Get the question from the previous page.\n  const inputRef = useRef(null);\n\n  // Selector\n  const userID = useSelector(selectors.user.selectUserID);\n\n  // States\n  const [messages, setMessages] = useState([]);\n  const [formData, setFormData] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [file, setFile] = useState(null);\n\n  useEffect(() => {\n    const q = query(\n      collection(firestore, \"Question\", question.questionID, \"chat\")\n    );\n    const unsubscribe = onSnapshot(q, (querySnapshot) => {\n      const chats = [];\n      querySnapshot.forEach((doc) => {\n        const chat = doc.data();\n        const chatPosition =\n          chat.author.id == question.clientID ? \"left\" : \"right\";\n\n        // Get the chat type\n        let chatType = \"text\";\n        switch (chat.type) {\n          case \"image\":\n            chatType = \"photo\";\n            break;\n          case \"file\":\n            chatType = \"file\";\n            break;\n          default:\n            chatType = \"text\";\n            break;\n        }\n\n        // Get the class name according to the side and data type\n        let classNames = \"py-2 text-black text-lg\";\n        if (chatPosition == \"left\") {\n          if (chat.type == \"image\") {\n            classNames += \" mr-[60%]\";\n          } else {\n            classNames += \" mr-16\";\n          }\n        } else {\n          if (chat.type == \"image\") {\n            classNames += \" ml-[60%]\";\n          } else {\n            classNames += \" ml-16\";\n          }\n        }\n\n        const chatModel = {\n          position: chatPosition,\n          type: chatType,\n          id: chat.id,\n          date: new Date(chat.createdAt),\n          className: classNames,\n          // className: chatPosition == \"py-2 mr-16 \",\n          text: chat.text ? chat.text : chat.name,\n          title: chatPosition == \"left\" ? \"Client\" : \"Admin\",\n          data: {\n            uri: chat.uri,\n            className: \"w-40\",\n            // uri: \"https://picsum.photos/200\",\n            status: {\n              click: false,\n              loading: 0,\n            },\n          },\n        };\n        chats.push(chatModel);\n      });\n      setMessages(chats);\n      questionServices.updateQuestion(question.questionID, {\n        isReadAdmin: true, // When the admin come to the chat, seen status is changed.\n      });\n    });\n\n    return unsubscribe;\n  }, []);\n\n  /**\n   * Handlers\n   */\n  const handleAttachIconClick = () => {\n    inputRef.current.click();\n  };\n\n  const handleChange = (e) => {\n    setFormData(e.target.value);\n  };\n\n  const handleFileInputChange = async (e) => {\n    const file = e.target.files?.[0];\n    if (!file) return;\n    const msgTime = new Date().valueOf();\n    const TWENTY_MB = 1024 * 1024 * 20;\n\n    if (file.size > TWENTY_MB) {\n      toast.error(\"Max file size is 20MB\");\n      return;\n    }\n    // Check file type\n    let fileType = \"image\";\n    if (file.type.startsWith(\"image\")) {\n      fileType = \"image\";\n    } else {\n      fileType = \"file\";\n    }\n\n    const chat = {\n      author: { id: userID },\n      createdAt: msgTime,\n      id: msgTime.toString(),\n      type: fileType,\n      name: file.name,\n      size: file.size,\n      height: 720,\n      width: 1140,\n      mimeType: file.type,\n    };\n\n    try {\n      if (question.status == \"Yet to be picked\") {\n        await questionServices.updateQuestion(question.questionID, {\n          status: \"Ongoing\",\n          isReadClient: false, // When a new msg is sent change the read status of client message\n          adminID: userID,\n        });\n      } else {\n        await questionServices.updateQuestion(question.questionID, {\n          isReadClient: false, // When a new msg is sent change the read status of client message\n          adminID: userID,\n        });\n      }\n\n      await questionServices.addChatFileToQuestion(\n        question.questionID,\n        file,\n        chat\n      );\n    } catch (error) {\n      console.log(error);\n      toast.error(\"Error uploading file\");\n    }\n  };\n\n  // Handle send btn pressed\n  const handleSend = async (e) => {\n    e.preventDefault();\n    if (formData == \"\" || !formData) return;\n    const msgTime = new Date().valueOf();\n    const chat = {\n      author: { id: userID },\n      createdAt: msgTime,\n      id: msgTime.toString(),\n      type: \"text\",\n      text: formData,\n    };\n    try {\n      if (question.status == \"Yet to be picked\") {\n        await questionServices.updateQuestion(question.questionID, {\n          status: \"Ongoing\",\n          isReadClient: false, // When a new msg is sent change the read status of client message\n          adminID: userID,\n        });\n      } else {\n        await questionServices.updateQuestion(question.questionID, {\n          isReadClient: false, // When a new msg is sent change the read status of client message\n          adminID: userID,\n        });\n      }\n\n      await questionServices.addChatToQuestion(question.questionID, chat);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // Handle submit answer button\n  const handleSubmitAnswerBtnPressed = async () => {\n    if (question.status == \"Answered\") return;\n    setLoading(true);\n\n    // If the status in assistance change the status.\n    if (question.status == \"Assistance\") {\n      try {\n        await questionServices.updateQuestion(question.questionID, {\n          status: \"Ended\",\n        });\n      } catch (error) {\n        setLoading(false);\n        toast.error(t(\"common_error\"));\n      }\n    } else {\n      try {\n        await questionServices.updateQuestion(question.questionID, {\n          status: \"Answered\",\n        });\n        const msgTime = new Date().valueOf();\n        const chat = {\n          author: { id: userID },\n          createdAt: msgTime,\n          id: msgTime.toString(),\n          type: \"text\",\n          text: \"Answered the question.\",\n        };\n        await questionServices.updateQuestion(question.questionID, {\n          isReadStatus: false,\n          isReadClient: false, // When a new msg is sent change the read status of client message\n        });\n        await questionServices.addChatToQuestion(question.questionID, chat);\n      } catch (error) {\n        setLoading(false);\n        toast.error(t(\"common_error\"));\n      }\n      setLoading(false);\n    }\n  };\n\n  // Handle file/image download\n  const handleFileDownload = async (fileURI, fileName) => {\n    await saveImg(fileURI, fileName);\n  };\n\n  return (\n    <>\n      <div className=\"col-span-1 py-2 flex justify-center align-middle bg-slate-50\">\n        <CButton\n          className=\" text-md\"\n          color=\"primary\"\n          variant=\"outline\"\n          onClick={() =>\n            history.push({\n              pathname: \"/law-admin/question/pool\",\n              state: {\n                client: {\n                  clientID: question.clientID,\n                  clientName: question.clientName,\n                },\n              },\n            })\n          }\n        >\n          <CIcon icon={cilSearch} />{\" \"}\n          <span className=\"text-sm\">{t(\"show_previous_questions\")}</span>\n        </CButton>\n      </div>\n      <div\n        className={`mb-4 columns-1 flex flex-col justify-between \n      h-screen bg-slate-50 overflow-y-scroll w-full`}\n      >\n        {/* <SystemMessage text={\"Sample System message!\"} /> */}\n        <MessageList\n          className=\"message-list m-1\"\n          lockable={true}\n          toBottomHeight={\"100%\"}\n          dataSource={messages}\n          onDownload={(item) => handleFileDownload(item.data.uri, item.text)}\n          // onOpen={(item) => { console.log(item) }}\n        />\n\n        <div className=\"mb-0 mx-1 sticky bottom-0 grid grid-cols-8 align-middle justify-center \">\n          <div className=\"col-span-7 shadow border-b border-gray-200\">\n            <Input\n              className=\"m-1 p-1\"\n              value={file}\n              onChange={handleChange}\n              placeholder=\"Type here...\"\n              multiline={true}\n              rightButtons={\n                <Button\n                  className=\"mx-2 px-4\"\n                  color=\"white\"\n                  backgroundColor=\"black\"\n                  text=\"Send\"\n                  onClick={handleSend}\n                />\n              }\n              leftButtons={\n                <button\n                  id=\"recaptcha-container\"\n                  disabled={false}\n                  onClick={handleAttachIconClick}\n                  type=\"submit\"\n                  className={`group relative w-full flex justify-center py-1 px-4\n                    border-transparent text-sm font-medium text-black \n                    `}\n                >\n                  <input\n                    style={{ display: \"none\" }}\n                    ref={inputRef}\n                    type=\"file\"\n                    onChange={handleFileInputChange}\n                  />\n                  <span className=\"absolute left-0 inset-y-0 flex items-center pl-3\">\n                    <LinkIcon className=\"h-5 w-5\" aria-hidden=\"true\" />\n                  </span>\n                </button>\n              }\n            />\n          </div>\n          <div className=\"col-span-1 py-2 flex justify-center align-middle\">\n            <Button\n              className=\"px-4\"\n              color=\"white\"\n              backgroundColor=\"green\"\n              text={\n                question.status == \"Assistance\"\n                  ? t(\"finish\")\n                  : t(\"submit_answer\")\n              }\n              onClick={handleSubmitAnswerBtnPressed}\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 13411;\nmodule.exports = webpackEmptyContext;"],"names":["Chat","props","history","useHistory","t","useDispatch","useTranslation","question","window","innerHeight","location","state","inputRef","useRef","userID","useSelector","selectors","useState","messages","setMessages","formData","setFormData","setLoading","file","useEffect","q","query","collection","firestore","questionID","onSnapshot","querySnapshot","chats","forEach","doc","chat","data","chatPosition","author","id","clientID","chatType","type","classNames","chatModel","position","date","Date","createdAt","className","text","name","title","uri","status","click","loading","push","questionServices","isReadAdmin","handleFileInputChange","e","target","files","msgTime","valueOf","size","toast","fileType","startsWith","toString","height","width","mimeType","isReadClient","adminID","console","log","handleSend","preventDefault","handleSubmitAnswerBtnPressed","isReadStatus","handleFileDownload","fileURI","fileName","saveImg","color","variant","onClick","pathname","client","clientName","icon","cilSearch","lockable","toBottomHeight","dataSource","onDownload","item","value","onChange","placeholder","multiline","rightButtons","backgroundColor","leftButtons","disabled","current","style","display","ref","webpackEmptyContext","req","Error","code","keys","resolve","module","exports"],"sourceRoot":""}