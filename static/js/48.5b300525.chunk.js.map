{"version":3,"file":"static/js/48.5b300525.chunk.js","mappings":"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","sources":["components/common/CustomCInputGroup.js","views/accounts/admin/AccountAddPage.js"],"sourcesContent":["import React from \"react\";\nimport {\n  CFormFeedback,\n  CFormInput,\n  CFormTextarea,\n  CFormSelect,\n  CInputGroup,\n  CButton,\n  CFormLabel,\n  CTableHeaderCell,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableRow,\n  CCol,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport { cilPlus } from \"@coreui/icons\";\nimport PhoneInputWithCountry from \"react-phone-number-input\";\n\n// Custom form input group component\nexport function CustomCFormInputGroup({\n  label,\n  name,\n  placeholder,\n  value,\n  onChange,\n  error,\n  readOnly = false,\n  mdSize = 12,\n  type = \"text\",\n  required = true,\n  multiple = true,\n  uppercase = false,\n  inputClassName = \"\",\n}) {\n  return (\n    <>\n      <CCol className=\"mb-3\" xs={12} md={mdSize}>\n        <CFormLabel\n          htmlFor={name}\n          className={uppercase ? \"uppercase\" : \"\"}\n        >{`${label}${required ? \"*\" : \"\"}`}</CFormLabel>\n        <CFormInput\n          disabled={readOnly}\n          type={type}\n          className={`!bg-white ${inputClassName}`}\n          readOnly={readOnly}\n          id={name}\n          name={name}\n          onChange={onChange}\n          // defaultValue={value}\n          value={value}\n          // required={required}\n          invalid={error ? true : false}\n          placeholder={placeholder}\n          multiple={multiple}\n        />\n        <CFormFeedback invalid>{error}</CFormFeedback>\n      </CCol>\n    </>\n  );\n}\n\n// Custom phone number input group component\nexport function CustomCFormPhoneNumberInputGroup({\n  label,\n  name,\n  placeholder,\n  value,\n  onChange,\n  error,\n  readOnly = false,\n  mdSize = 12,\n  required = true,\n  multiple = true,\n  uppercase = false,\n  inputClassName = \"\",\n}) {\n  return (\n    <>\n      <CCol className=\"mb-3\" xs={12} md={mdSize}>\n        <CFormLabel\n          htmlFor={name}\n          className={uppercase ? \"uppercase\" : \"\"}\n        >{`${label}${required ? \"*\" : \"\"}`}</CFormLabel>\n        <PhoneInputWithCountry\n          name={name}\n          value={value}\n          onChange={onChange}\n          defaultCountry=\"LK\"\n          readOnly={readOnly}\n          style={{\n            width: \"100%\",\n            borderColor: \"red\",\n            padding: \"15px\",\n            marginBottom: \"4px\",\n            height: 40,\n            borderWidth: \"1px\",\n            borderStyle: \"solid\",\n            borderColor: error ? \"red\" : \"#ced4da\",\n            backgroundColor: \"#fff\",\n          }}\n        />\n        <CFormFeedback invalid={error ? true : false}>{error}</CFormFeedback>\n      </CCol>\n    </>\n  );\n}\n\n// Custom form input with add button group component\nexport function CustomCFormAddInputGroup({\n  label,\n  name,\n  placeholder,\n  value,\n  onChange,\n  error,\n  readOnly = false,\n  mdSize = 12,\n  type = \"text\",\n  required = true,\n  multiple = true,\n  uppercase = false,\n  inputClassName = \"\",\n  onAddInputBtnPressed,\n  addListName,\n  list,\n  addBtnLabel = \"Add\",\n  tableHeaders = [\"Name\"],\n  tableRows = [\"name\"],\n  handleChildRemoveBtnPressed,\n}) {\n  return (\n    <>\n      <CFormLabel\n        htmlFor={name}\n        className={uppercase ? \"uppercase\" : \"\"}\n      >{`${label}${required ? \"*\" : \"\"}`}</CFormLabel>\n      {!readOnly && (\n        <CCol className=\"mb-3\" xs={12} md={mdSize}>\n          <CInputGroup>\n            <CFormInput\n              type={type}\n              className={`!bg-white ${inputClassName}`}\n              readOnly={readOnly}\n              id={name}\n              name={name}\n              onChange={onChange}\n              value={value}\n              // required={required}\n              invalid={error ? true : false}\n              placeholder={placeholder}\n              multiple={multiple}\n              aria-describedby=\"button-addon2\"\n            />\n            <CButton\n              name={addListName}\n              type=\"button\"\n              color=\"secondary\"\n              variant=\"outline\"\n              id=\"button-addon2\"\n              onClick={(e) => onAddInputBtnPressed({ e, tempFieldName: name })}\n            >\n              {/* <CIcon icon={cilPlus} size=\"sm\" className=\"mx-1\"/> */}\n              {addBtnLabel}\n            </CButton>\n          </CInputGroup>\n          <CFormFeedback invalid>{error}</CFormFeedback>\n        </CCol>\n      )}\n\n      {list.length > 0 && (\n        <CTable>\n          <CTableHead>\n            <CTableRow>\n              {tableHeaders.map((header, index) => (\n                <CTableHeaderCell scope=\"col\" key={index}>\n                  {\"\"}\n                  {header}\n                </CTableHeaderCell>\n              ))}\n              <CTableHeaderCell scope=\"col\"></CTableHeaderCell>\n            </CTableRow>\n          </CTableHead>\n          <CTableBody>\n            {list.map((child, index) => (\n              <CTableRow key={index}>\n                {tableRows.map((row, index) => (\n                  <CTableDataCell scope=\"col\" key={index}>\n                    {\"\"}\n                    {child[row]}\n                  </CTableDataCell>\n                ))}\n                <CTableDataCell>\n                  {!readOnly && (\n                    <CButton\n                      color=\"danger\"\n                      variant=\"ghost\"\n                      name=\"childrenRemoveBtn\"\n                      onClick={(_) =>\n                        handleChildRemoveBtnPressed({\n                          child,\n                          listName: addListName,\n                        })\n                      }\n                    >\n                      Remove\n                    </CButton>\n                  )}\n                </CTableDataCell>\n              </CTableRow>\n            ))}\n          </CTableBody>\n        </CTable>\n      )}\n    </>\n  );\n}\n\nexport function CustomCFormTextAreaGroup({\n  label,\n  name,\n  placeholder,\n  value,\n  onChange,\n  error,\n  readOnly = false,\n  mdSize = 12,\n  type = \"text\",\n  required = true,\n  uppercase = false,\n  inputClassName = \"\",\n}) {\n  return (\n    <>\n      <CCol className=\"mb-3\" xs={12} md={mdSize}>\n        <CFormLabel\n          htmlFor={name}\n          className={uppercase ? \"uppercase\" : \"\"}\n        >{`${label}${required ? \"*\" : \"\"}`}</CFormLabel>\n        <CFormTextarea\n          type={type}\n          className={`!bg-white ${inputClassName}`}\n          readOnly={readOnly}\n          id={name}\n          name={name}\n          onChange={onChange}\n          value={value}\n          invalid={error ? true : false}\n          placeholder={placeholder}\n          rows=\"4\"\n        />\n        <CFormFeedback invalid>{error}</CFormFeedback>\n      </CCol>\n    </>\n  );\n}\n\nexport function CustomCFormFilesGroup({\n  label,\n  name,\n  placeholder,\n  onChange,\n  error,\n  readOnly = false,\n  mdSize = 12,\n  type = \"file\",\n  required = true,\n  multiple = true,\n  uppercase = false,\n  inputClassName = \"\",\n}) {\n  return (\n    <>\n      <CCol className=\"mb-3\" xs={12} md={mdSize}>\n        <CFormLabel\n          htmlFor={name}\n          className={uppercase ? \"uppercase\" : \"\"}\n        >{`${label}${required ? \"*\" : \"\"}`}</CFormLabel>\n        <CFormInput\n          type={type}\n          className={`!bg-white ${inputClassName}`}\n          readOnly={readOnly}\n          id={name}\n          name={name}\n          onChange={onChange}\n          // required={required}\n          invalid={error ? true : false}\n          placeholder={placeholder}\n          multiple={multiple}\n        />\n        <CFormFeedback invalid>{error}</CFormFeedback>\n      </CCol>\n    </>\n  );\n}\n\nexport function CustomCFormSelectGroup({\n  label,\n  name,\n  placeholder,\n  onChange,\n  error,\n  mdSize = 12,\n  required = true,\n  uppercase = false,\n  inputClassName = \"\",\n  options,\n  value,\n  defaultValue,\n}) {\n  return (\n    <>\n      <CCol className=\"mb-3\" xs={12} md={mdSize}>\n        <CFormLabel\n          htmlFor={name}\n          className={uppercase ? \"uppercase\" : \"\"}\n        >{`${label}${required ? \"*\" : \"\"}`}</CFormLabel>\n        <CFormSelect\n          className={`!bg-white ${inputClassName}`}\n          name={name}\n          defaultValue={defaultValue}\n          onChange={onChange}\n          aria-label=\"Default select example\"\n          invalid={error ? true : false}\n          value={value}\n        >\n          <option>Open this select menu</option>\n          {options.map((option, index) => (\n            <option key={index} value={option.value}>\n              {option.label}\n            </option>\n          ))}\n        </CFormSelect>\n        <CFormFeedback invalid>{error}</CFormFeedback>\n      </CCol>\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { toast } from \"react-toastify\";\nimport Joi from \"joi\";\nimport { useTranslation } from \"react-i18next\";\nimport { isPossiblePhoneNumber } from \"react-phone-number-input\";\n\nimport { countryArray } from \"src/utils\";\nimport {\n  CustomCFormInputGroup,\n  CustomCFormSelectGroup,\n  CustomCFormPhoneNumberInputGroup,\n} from \"src/components/common/CustomCInputGroup\";\nimport { userServices } from \"src/services\";\n\nimport { CButton } from \"@coreui/react\";\n\n/**\n * Admin account add page\n * TODO: Change according to law app requirements\n */\nconst AdminAddPage = () => {\n  const { t } = useTranslation();\n\n  const [formData, setFormData] = useState(initialValue);\n  const [formErrors, setFormErrors] = useState({});\n  const [countryOptions, setCountryOptions] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setCountryOptions(countryArray);\n  }, []);\n\n  // Joi schema\n  const schema = Joi.object({\n    fullName: Joi.string().required().label(\"Full name\"),\n    country: Joi.string().required().label(\"Country\"),\n    dob: Joi.date().required().label(\"Date of birth\").max(\"now\"),\n    email: Joi.string()\n      .email({ tlds: { allow: false } })\n      .required()\n      .label(\"Email\"),\n    phoneNumber: Joi.string().required().label(\"Phone Number\"),\n  });\n\n  /*\n   * Form related functions\n   */\n\n  // Handle input change\n  const handleChange = (e) => {\n    const { name, value, files } = e.target;\n      delete formErrors[name];\n      setFormData({ ...formData, [name]: value });\n  };\n\n  const handlePhoneChange = (value) => {\n    delete formErrors[\"phoneNumber\"];\n    setFormData({ ...formData, phoneNumber: value });\n  };\n\n  // Handle add agent form submit\n  const handleSubmit = async (e) => {\n    setLoading(true);\n    const { error, value } = schema.validate(formData, { abortEarly: false });\n    let phoneError = false;\n    if (!isPossiblePhoneNumber(formData.phoneNumber)) {\n      setLoading(false);\n      setFormErrors({ ...formErrors, phoneNumber: \"Invalid phone number\" });\n      phoneError = true;\n    }\n    if (!error && !phoneError) {\n      try {\n        await userServices.addAdmin(value);\n        toast.success(t(\"common_success\"));\n        setFormData(initialValue);\n      } catch (error) {\n        toast.error(\"Something went wrong. Please try again later.\");\n      } finally {\n        setLoading(false);\n      }\n    } else {\n      const errors = {};\n      for (let item of error.details) {\n        errors[item.path[0]] = item.message;\n      }\n      setFormErrors({ ...formErrors, ...errors });\n      setLoading(false);\n    }\n  };\n  return (\n    <>\n      <div className=\"shadow sm:rounded-lg bg-white p-4 mb-5 row g-3 mt-8\">\n        <div className=\"row g-3\">\n          <CustomCFormInputGroup\n            label={t(\"full_name\")}\n            name=\"fullName\"\n            value={formData.fullName}\n            onChange={handleChange}\n            error={formErrors.fullName}\n            uppercase={true}\n          />\n          <CustomCFormInputGroup\n            label={t(\"email_address\")}\n            name=\"email\"\n            value={formData.email}\n            onChange={handleChange}\n            error={formErrors.email}\n            uppercase={true}\n            mdSize={6}\n          />\n          <CustomCFormSelectGroup\n            label={t(\"country\")}\n            name=\"country\"\n            value={formData.country}\n            onChange={handleChange}\n            error={formErrors.country}\n            uppercase={true}\n            mdSize={6}\n            options={countryOptions}\n          />\n          <CustomCFormPhoneNumberInputGroup\n            label={t(\"phone_number\")}\n            name=\"phoneNumber\"\n            value={formData.phoneNumber}\n            onChange={handlePhoneChange}\n            error={formErrors.phoneNumber}\n            uppercase={true}\n            mdSize={6}\n          />\n          <CustomCFormInputGroup\n            label={t(\"date_of_birth\")}\n            name=\"dob\"\n            value={formData.dob}\n            onChange={handleChange}\n            error={formErrors.dob}\n            uppercase={true}\n            mdSize={6}\n            type=\"date\"\n          />\n        </div>\n        <div className=\"grid justify-end\">\n          <CButton\n            color=\"primary\"\n            variant=\"outline\"\n            className=\"mr-2\"\n            onClick={handleSubmit}\n            disabled={loading}\n          >\n            {\" \"}\n            Submit{\" \"}\n          </CButton>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default AdminAddPage;\n\nconst initialValue = {\n  fullName: \"\",\n  email: \"\",\n  phoneNumber: \"\",\n  country: \"\",\n  dob: \"\",\n};\n"],"names":["CustomCFormInputGroup","label","name","placeholder","value","onChange","error","readOnly","mdSize","type","required","multiple","uppercase","inputClassName","className","xs","md","htmlFor","disabled","id","invalid","CustomCFormPhoneNumberInputGroup","defaultCountry","style","width","borderColor","padding","marginBottom","height","borderWidth","borderStyle","CustomCFormSelectGroup","options","defaultValue","map","option","index","t","useTranslation","useState","initialValue","formData","setFormData","formErrors","setFormErrors","countryOptions","setCountryOptions","loading","setLoading","useEffect","countryArray","schema","Joi","fullName","country","dob","max","email","tlds","allow","phoneNumber","handleChange","e","target","files","handleSubmit","validate","abortEarly","phoneError","isPossiblePhoneNumber","userServices","toast","errors","details","item","path","message","color","variant","onClick"],"sourceRoot":""}