{"version":3,"file":"static/js/54.7b8b0f8f.chunk.js","mappings":"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","sources":["models/types.js","views/chat/Chat.js","../node_modules/typescript/lib|sync"],"sourcesContent":["export const QuestionStatus = {\n    yetToBePicked: \"Yet to be picked\",\n    ongoing: \"Ongoing\",\n    answered: \"Answered\",\n    timeUP: \"Time up\",\n    assistance: \"Assistance\",\n    ended: \"Ended\",\n}","import React, { useEffect, useState, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport Joi from \"joi\";\nimport { LinkIcon } from \"@heroicons/react/solid\";\nimport { toast } from \"react-toastify\";\nimport { useTranslation } from \"react-i18next\";\nimport { MessageList, Input, Button, MessageBox } from \"react-chat-elements\";\nimport { SystemMessage } from \"react-chat-elements\";\nimport CIcon from \"@coreui/icons-react\";\nimport { CButton } from \"@coreui/react\";\nimport { cilSearch } from \"@coreui/icons\";\nimport { QuestionStatus } from \"src/models/types\";\n\n// Custom imports\nimport { LoadingIndicator, Modal } from \"src/components\";\nimport { saveImg } from \"src/utils/function\";\nimport {\n  collection,\n  query,\n  where,\n  onSnapshot,\n  firestore,\n  doc\n} from \"src/services/firebase\";\nimport { selectors } from \"src/store\";\nimport { questionServices, userServices } from \"src/services\";\nimport { textSpanContainsTextSpan } from \"typescript\";\n\n/**\n * Single Chat User Interface\n */\nexport default function Chat(props) {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n  const screenHeight = window.innerHeight - 128; // Due to purge issue tailwind css doesn't detect variable changes.\n  const question = props.location.state.question; // Get the question from the previous page.\n  const inputRef = useRef(null);\n  const scrollViewRef = useRef();\n  const textRef = useRef();\n\n  // Selector\n  const userID = useSelector(selectors.user.selectUserID);\n\n  // States\n  const [messages, setMessages] = useState([]);\n  const [formData, setFormData] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [file, setFile] = useState(null);\n  const [fcmTokens, setFCMTokens] = useState([]);\n  const [modalVisible, setModalVisible] = useState(false);\n  const [showSubmitButton, setShowSubmitButton] = useState(false);\n\n  // Get messages from the firestore\n  useEffect(() => {\n    const q = query(\n      collection(firestore, \"Question\", question.questionID, \"chat\")\n    );\n    const unsubscribe = onSnapshot(q, (querySnapshot) => {\n      const chats = [];\n      querySnapshot.forEach((doc) => {\n        const chat = doc.data();\n        const chatPosition =\n          chat.author.id == question.clientID ? \"left\" : \"right\";\n\n        // Get the chat type\n        let chatType = \"text\";\n        switch (chat.type) {\n          case \"image\":\n            chatType = \"photo\";\n            break;\n          case \"file\":\n            chatType = \"file\";\n            break;\n          default:\n            chatType = \"text\";\n            break;\n        }\n\n        // Get the class name according to the side and data type\n        let classNames = \"py-2 text-black text-lg\";\n        if (chatPosition == \"left\") {\n          if (chat.type == \"image\") {\n            classNames += \" mr-[60%]\";\n          } else {\n            classNames += \" mr-16\";\n          }\n        } else {\n          if (chat.type == \"image\") {\n            classNames += \" ml-[60%]\";\n          } else {\n            classNames += \" ml-16\";\n          }\n        }\n\n        const chatModel = {\n          position: chatPosition,\n          type: chatType,\n          id: chat.id,\n          date: new Date(chat.createdAt),\n          className: classNames,\n          // className: chatPosition == \"py-2 mr-16 \",\n          text: chat.text ? chat.text : chat.name,\n          title: chatPosition == \"left\" ? \"Client\" : \"Admin\",\n          data: {\n            uri: chat.uri,\n            className: \"w-40\",\n            // uri: \"https://picsum.photos/200\",\n            status: {\n              click: false,\n              loading: 0,\n            },\n          },\n        };\n        chats.push(chatModel);\n      });\n      setMessages(chats);\n      if (chats.length > 0) {\n        scrollToBottom();\n      }\n\n      questionServices.updateQuestion(question.questionID, {\n        isReadAdmin: true, // When the admin come to the chat, seen status is changed.\n      });\n    });\n\n    return unsubscribe;\n  }, []);\n\n  // Listen to question status\n  useEffect(() => {\n    const q = query(\n      doc(firestore, \"Question\", question.questionID)\n    );\n    const unsubscribe = onSnapshot(q, (querySnapshot) => {\n      // Make the submit answer button disabled if the question is answered\n      if (querySnapshot.data().status == QuestionStatus.answered) {\n        setShowSubmitButton(false);\n      } else {\n        setShowSubmitButton(true);\n      }\n    });\n\n    return unsubscribe;\n  }, []);\n\n  // Get client details from the firestore\n  useEffect(() => {\n    const fetchData = async () => {\n      const client = await userServices.getUserByID(question.clientID);\n      console.log(client);\n      const tokens = Object.values(client.fcmToken).filter(\n        (token) => token != null && token != undefined && token != \"\"\n      );\n      setFCMTokens(tokens);\n    };\n    fetchData().catch((err) => {\n      console.log(err);\n    });\n  }, []);\n\n  // Scroll to the bottom of the chat\n  // useEffect(() => {\n  //   scrollToBottom();\n  // }, [messages]);\n\n  \n\n  /**\n   * Handlers\n   */\n  const handleAttachIconClick = () => {\n    inputRef.current.click();\n  };\n\n  const handleChange = (e) => {\n    setFormData(e.target.value);\n  };\n\n  const handleFileInputChange = async (e) => {\n    const file = e.target.files?.[0];\n    if (!file) return;\n    const msgTime = new Date().valueOf();\n    const TWENTY_MB = 1024 * 1024 * 20;\n\n    if (file.size > TWENTY_MB) {\n      toast.error(\"Max file size is 20MB\");\n      return;\n    }\n    // Check file type\n    let fileType = \"image\";\n    if (file.type.startsWith(\"image\")) {\n      fileType = \"image\";\n    } else {\n      fileType = \"file\";\n    }\n\n    const chat = {\n      author: { id: userID },\n      createdAt: msgTime,\n      id: msgTime.toString(),\n      type: fileType,\n      name: file.name,\n      size: file.size,\n      height: 720,\n      width: 1140,\n      mimeType: file.type,\n    };\n\n    try {\n      if (question.status == \"Yet to be picked\") {\n        await questionServices.updateQuestion(question.questionID, {\n          status: \"Ongoing\",\n          isReadClient: false, // When a new msg is sent change the read status of client message\n          adminID: userID,\n        });\n      } else {\n        await questionServices.updateQuestion(question.questionID, {\n          isReadClient: false, // When a new msg is sent change the read status of client message\n          adminID: userID,\n        });\n      }\n\n      await questionServices.addChatFileToQuestion(\n        question.questionID,\n        file,\n        chat\n      );\n      await questionServices.sendChatNotification(\n        fcmTokens,\n        question.questionID\n      );\n    } catch (error) {\n      console.log(error);\n      toast.error(\"Error uploading file\");\n    }\n  };\n\n  // Handle send btn pressed\n  const handleSend = async (e) => {\n    e.preventDefault();\n    if (formData == \"\" || !formData) return;\n    const msgTime = new Date().valueOf();\n    const chat = {\n      author: { id: userID },\n      createdAt: msgTime,\n      id: msgTime.toString(),\n      type: \"text\",\n      text: formData,\n    };\n\n    try {\n      if (question.status == \"Yet to be picked\") {\n        await questionServices.updateQuestion(question.questionID, {\n          status: \"Ongoing\",\n          isReadClient: false, // When a new msg is sent change the read status of client message\n          adminID: userID,\n        });\n      } else {\n        await questionServices.updateQuestion(question.questionID, {\n          isReadClient: false, // When a new msg is sent change the read status of client message\n          adminID: userID,\n        });\n      }\n\n      await questionServices.addChatToQuestion(question.questionID, chat);\n      textRef.current.value = \"\";\n\n      await questionServices.sendChatNotification(\n        fcmTokens,\n        question.questionID\n      );\n    } catch (error) {\n      console.log(error);\n    }\n    scrollToBottom();\n  };\n\n  // Handle submit answer button\n  const handleSubmitAnswerBtnPressed = async (e) => {\n    // if (question.status == \"Answered\") return;\n    setLoading(true);\n    e.preventDefault();\n    // If the status in assistance change the status.\n    if (question.status == \"Assistance\") {\n      try {\n        await questionServices.updateQuestion(question.questionID, {\n          status: \"Ended\",\n        });\n      } catch (error) {\n        setLoading(false);\n        toast.error(t(\"common_error\"));\n      }\n    } else {\n      try {\n        setModalVisible(false);\n        await handleSend(e);\n        await questionServices.updateQuestion(question.questionID, {\n          status: \"Answered\",\n        });\n        const msgTime = new Date().valueOf();\n        const chat = {\n          author: { id: userID },\n          createdAt: msgTime,\n          id: msgTime.toString(),\n          type: \"text\",\n          text: \"Answered the question.\",\n        };\n        await questionServices.updateQuestion(question.questionID, {\n          isReadStatus: false,\n          isReadClient: false, // When a new msg is sent change the read status of client message\n        });\n        await questionServices.addChatToQuestion(question.questionID, chat);\n      } catch (error) {\n        setLoading(false);\n        toast.error(t(\"common_error\"));\n      }\n      setModalVisible(false);\n      setLoading(false);\n    }\n  };\n\n  // When the question is answered and user want to answer again, enable the submit answer button\n  const handleAnswerAgainBtnPressed = async (e) => {\n    await handleSubmitAnswerBtnPressed(e);\n    setModalVisible(false);\n  };\n\n  // Handle file/image download\n  const handleFileDownload = async (fileURI, fileName) => {\n    await saveImg(fileURI, fileName);\n  };\n\n  const scrollToBottom = () => {\n    scrollViewRef.current.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  const handleClear = (e) => {\n    console.log(e);\n    e.target.value = \"\";\n    return;\n  };\n\n  return (\n    <>\n      <div className=\"col-span-1 py-2 flex justify-center align-middle bg-slate-50\">\n        <Modal\n          modalVisible={modalVisible}\n          setModalVisible={setModalVisible}\n          successCallback={(e) => handleAnswerAgainBtnPressed(e)}\n          successLabel={t(\"resubmit\")}\n          title={t(\"resubmit_answer\")}\n          body={t(\"are_you_sure_you_want_to_resubmit\")}\n        />\n        <CButton\n          className=\" text-md\"\n          color=\"primary\"\n          variant=\"outline\"\n          onClick={() =>\n            history.push({\n              pathname: \"/law-admin/question/pool\",\n              state: {\n                client: {\n                  clientID: question.clientID,\n                  clientName: question.clientName,\n                },\n              },\n            })\n          }\n        >\n          <CIcon icon={cilSearch} />{\" \"}\n          <span className=\"text-sm\">{t(\"show_previous_questions\")}</span>\n        </CButton>\n      </div>\n      <div\n        className={`mb-4 columns-1 flex flex-col justify-between \n      h-screen bg-slate-50 overflow-y-scroll w-full`}\n      >\n        {/* <SystemMessage text={\"Sample System message!\"} /> */}\n        <MessageList\n          className=\"message-list m-1\"\n          lockable={true}\n          toBottomHeight={\"100%\"}\n          dataSource={messages}\n          onDownload={(item) => handleFileDownload(item.data.uri, item.text)}\n        />\n\n        <div ref={scrollViewRef}></div>\n\n        <div className=\"mb-0  mx-1 sticky bottom-0 grid grid-cols-8 align-middle justify-center \">\n          <div className=\"col-span-8 ml-4 shadow border-b border-gray-200\">\n            <Input\n              referance={textRef}\n              className=\"m-1 p-1\"\n              defaultValue={formData}\n              // clear={(e) => handleClear(e)}\n              onChange={handleChange}\n              placeholder=\"Type here...\"\n              multiline={true}\n              \n              rightButtons={\n                <div>\n                  <Button\n                  className=\"mx-2 px-4\"\n                  color=\"white\"\n                  backgroundColor=\"black\"\n                  text=\"Send\"\n                  onClick={handleSend}\n                  />\n                  <Button\n                    disabled={!showSubmitButton || formData == \"\" || !formData}\n              className=\"px-4\"\n              color=\"white\"\n              backgroundColor={showSubmitButton ? \"green\" : \"grey\"}\n              text={\n                question.status == \"Assistance\"\n                  ? t(\"finish\")\n                  : t(\"submit_answer\")\n              }\n              onClick={(e) => {\n                if (formData == \"\" || !formData) return;\n                // If the button is disabled show the modal.\n                if (!showSubmitButton) {\n                  setModalVisible(true);\n                } else {\n                  setShowSubmitButton(false);\n                  handleSubmitAnswerBtnPressed(e);\n                }\n              }}\n            />\n\n                  </div>\n                \n                \n              }\n              leftButtons={\n                <button\n                  id=\"recaptcha-container\"\n                  disabled={false}\n                  onClick={handleAttachIconClick}\n                  type=\"submit\"\n                  className={`group relative w-full flex justify-center py-1 px-4\n                    border-transparent text-sm font-medium text-black \n                    `}\n                >\n                  <input\n                    style={{ display: \"none\" }}\n                    ref={inputRef}\n                    type=\"file\"\n                    onChange={handleFileInputChange}\n                  />\n                  <span className=\"absolute left-0 inset-y-0 flex items-center pl-3\">\n                    <LinkIcon className=\"h-5 w-5\" aria-hidden=\"true\" />\n                  </span>\n                </button>\n              }\n            />\n          </div>\n\n          {/* <div className=\"col-span-1 py-2 flex justify-center align-middle\">\n            <Button\n              className=\"px-4\"\n              color=\"white\"\n              backgroundColor={showSubmitButton ? \"green\" : \"grey\"}\n              text={\n                question.status == \"Assistance\"\n                  ? t(\"finish\")\n                  : t(\"submit_answer\")\n              }\n              onClick={(e) => {\n                console.log(showSubmitButton);\n                // If the button is disabled show the modal.\n                if (!showSubmitButton) {\n                  setModalVisible(true);\n                } else {\n                  setShowSubmitButton(false);\n                  handleSubmitAnswerBtnPressed(e);\n                }\n              }}\n            />\n          </div> */}\n        </div>\n      </div>\n    </>\n  );\n}\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 13411;\nmodule.exports = webpackEmptyContext;"],"names":["QuestionStatus","Chat","props","history","useHistory","t","useDispatch","useTranslation","question","window","innerHeight","location","state","inputRef","useRef","scrollViewRef","textRef","userID","useSelector","selectors","useState","messages","setMessages","formData","setFormData","setLoading","fcmTokens","setFCMTokens","modalVisible","setModalVisible","showSubmitButton","setShowSubmitButton","useEffect","q","query","collection","firestore","questionID","onSnapshot","querySnapshot","chats","forEach","doc","chat","data","chatPosition","author","id","clientID","chatType","type","classNames","chatModel","position","date","Date","createdAt","className","text","name","title","uri","status","click","loading","push","length","scrollToBottom","questionServices","isReadAdmin","fetchData","userServices","client","console","log","tokens","Object","values","fcmToken","filter","token","undefined","catch","err","handleFileInputChange","e","file","target","files","msgTime","valueOf","size","toast","fileType","startsWith","toString","height","width","mimeType","isReadClient","adminID","handleSend","preventDefault","current","value","handleSubmitAnswerBtnPressed","isReadStatus","handleAnswerAgainBtnPressed","handleFileDownload","fileURI","fileName","saveImg","scrollIntoView","behavior","successCallback","successLabel","body","color","variant","onClick","pathname","clientName","icon","cilSearch","lockable","toBottomHeight","dataSource","onDownload","item","ref","referance","defaultValue","onChange","placeholder","multiline","rightButtons","backgroundColor","disabled","leftButtons","style","display","LinkIcon","webpackEmptyContext","req","Error","code","keys","resolve","module","exports"],"sourceRoot":""}